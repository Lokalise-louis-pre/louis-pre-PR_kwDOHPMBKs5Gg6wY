{"version":3,"file":"components-Hint-Hint-stories-mdx.cb9e65a1.iframe.bundle.js","mappings":";;;;;AAaA;;;;AATA;AAAA;;;;;;;;AAwBA;;AAEA;;AAEA;AAGA;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;;;ACLA;AACA;AAEA;AA4EA;AACA;AAEA;;;;;;;;;ACjHA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;;;;;;AAWA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;;AAGA;AAuBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AChEA;AACA;AACA;AACA;AAGA;AAIA;;;AAKA;AAGA;AAGA;AAGA;AAGA;AAGA;AAeA;AATA;AAGA;AAGA;AAGA;AAGA;AASA;AAHA;AAGA;AAGA","sources":["webpack://@lokalise/louis/./src/components/Hint/styles.ts","webpack://@lokalise/louis/./src/components/Hint/Hint.stories.mdx","webpack://@lokalise/louis/./src/components/Popover/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts"],"sourcesContent":["import { css, styled } from '../../utils/styled';\nimport { color, excludeProps, radius, spacing, zIndex } from '../../utils/theme';\nimport { PopoverArrow as BaseArrow, PopoverContent as BaseContent } from '../Popover';\n\nconst side = '14px';\n\nconst centerPosition = css`\n    position: absolute; // Set as \"absolute\" so svg is not affecting line height.\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`;\n\nexport const HintButton = styled.span`\n    cursor: pointer;\n    display: inline-block;\n    vertical-align: baseline;\n    width: ${side};\n    min-height: ${side};\n    border-radius: 50%;\n    position: relative; // Necessary so \"icon\" can be positioned in the center\n    line-height: inherit;\n\n    &::before {\n        content: '\\\\a0'; // This space is necessary to hold line-height, which is necessary so Hint is visually aligned with the text\n    }\n`;\n\nexport const IconWrapper = styled.span`\n    display: inline-flex;\n    fill: ${color('interactive.content.idle')};\n    font-size: 16px;\n    ${centerPosition}\n`;\n\nexport const Content = styled(BaseContent).withConfig({\n    shouldForwardProp: excludeProps(['width']),\n})`\n    font-size: 14px;\n    line-height: 20px;\n    background-color: ${color('background.primary')};\n    color: ${color('content.secondary')};\n    border-radius: ${radius('md')};\n    padding: ${spacing(3, 4)};\n    border-color: ${color('border.primary')};\n    z-index: ${zIndex('tooltip')};\n    width: ${({ width }: { width: string }) => width};\n`;\n\nexport const Arrow = styled(BaseArrow)`\n    &:before {\n        background-color: ${color('background.primary')};\n        border-color: ${color('border.primary')};\n    }\n`;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs';\nimport { styled } from '../../utils/styled';\nimport { fontFamily, typography } from '../../utils/theme';\nimport { Hint } from './Hint';\nexport const Template = args => <Hint {...args} mdxType=\"Hint\" />;\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst StoryContent = makeShortcode(\"StoryContent\");\nconst layoutProps = {\n  Template\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Components/Hint\" component={Hint} parameters={{\n      controls: {\n        sort: 'requiredFirst'\n      },\n      docs: {\n        source: {\n          excludeDecorators: true\n        }\n      }\n    }} argTypes={{\n      width: {\n        control: {\n          type: 'text'\n        }\n      }\n    }} decorators={[Story => {\n      const StoryContent = styled.div`\n                font-family: ${fontFamily('default')};\n                ${typography('body')};\n            `;\n      return <StoryContent mdxType=\"StoryContent\">\n                    <>This could use an explanation {Story()} with some extra context.</>\n                </StoryContent>;\n    }]} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"hint\"\n    }}>{`Hint`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#overview\"\n        }}>{`Overview`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#figma-design-file\"\n        }}>{`Figma Design File`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#props\"\n        }}>{`Props`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#examples\"\n        }}>{`Examples`}</a></li>\n    </ul>\n    <h2 id=\"overview\">Overview</h2>\n    <p>{`Hint can be used as an icon button to provide additional context and explanations for other UI elements or text.`}</p>\n    <h3 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @lokalise/louis\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Hint } from '@lokalise/louis';\n\nexport default () => <Hint>This is a hint.</Hint>;\n`}</code></pre>\n    <h2 id=\"figma-design-file\">Figma Design File</h2>\n    <ul>\n      <li parentName=\"ul\">{`Figma Source File | Hint (not yet available in Figma, will be updated)`}</li>\n    </ul>\n    <h2 id=\"props\">Props</h2>\n    <ArgsTable of={Hint} sort=\"requiredFirst\" mdxType=\"ArgsTable\" />\n    <h2 id=\"examples\">Examples</h2>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n    <Story name=\"Hint\" args={{\n        children: 'This is a hint.'\n      }} mdxType=\"Story\">\n        {Template.bind({})}\n    </Story>\n    </Canvas>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n\nexport const hint = Template.bind({});\nhint.storyName = 'Hint';\nhint.args = {\n  children: 'This is a hint.'\n};\nhint.parameters = { storySource: { source: 'args => <Hint {...args} />' } };\n\nconst componentMeta = { title: 'Components/Hint', parameters: {\n  controls: {\n    sort: 'requiredFirst'\n  },\n  docs: {\n    source: {\n      excludeDecorators: true\n    }\n  }\n}, decorators: [Story => {\n  const StoryContent = styled.div`\n                font-family: ${fontFamily('default')};\n                ${typography('body')};\n            `;\n  return <StoryContent>\n                    <>This could use an explanation {Story()} with some extra context.</>\n                </StoryContent>;\n}], component: Hint, argTypes: {\n  width: {\n    control: {\n      type: 'text'\n    }\n  }\n}, includeStories: [\"hint\"],  };\n\nconst mdxStoryNameToKey = {\"Hint\":\"hint\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import type { Placement } from '@popperjs/core/lib/enums';\nimport type { HTMLAttributes } from 'react';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, radius, typography, variants, zIndex } from '../../utils/theme';\n\nconst bottom = css`\n    top: -5px;\n\n    &::before {\n        border-left-width: 1px;\n        border-left-style: solid;\n        border-top-width: 1px;\n        border-top-style: solid;\n    }\n`;\nconst top = css`\n    bottom: -5px;\n\n    &::before {\n        border-right-width: 1px;\n        border-right-style: solid;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n    }\n`;\nconst left = css`\n    right: -5px;\n\n    &::before {\n        border-right-width: 1px;\n        border-right-style: solid;\n        border-top-width: 1px;\n        border-top-style: solid;\n    }\n`;\nconst right = css`\n    left: -5px;\n\n    &::before {\n        border-left-width: 1px;\n        border-left-style: solid;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n    }\n`;\n\nexport const Arrow = styled.div<{ placement?: Placement }>`\n    position: absolute;\n    width: 8px;\n    height: 8px;\n    z-index: ${zIndex('hide')};\n\n    &::before {\n        position: absolute;\n        width: 8px;\n        height: 8px;\n        z-index: ${zIndex('hide')};\n        content: '';\n        display: block;\n        transform: rotate(45deg);\n        background-color: ${color('background.primary')};\n        border-color: ${color('border.primary')};\n    }\n\n    ${variants(\n        'placement',\n        {\n            top,\n            bottom,\n            left,\n            right,\n            'right-end': right,\n            'right-start': right,\n            'left-start': left,\n            'auto-end': css``,\n            'auto-start': css``,\n            auto: css``,\n            'bottom-end': bottom,\n            'bottom-start': bottom,\n            'left-end': left,\n            'top-end': top,\n            'top-start': top,\n        },\n        'auto',\n    )}\n`;\n\nexport const Content = styled.div<HTMLAttributes<HTMLElement>>`\n    padding: 0;\n    border-radius: ${radius('md')};\n    background-color: ${color('background.primary')};\n    border: 1px solid ${color('border.primary')};\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n    z-index: ${zIndex('popover')};\n    color: ${color('content.primary')};\n    font-family: ${fontFamily('default')};\n    ${typography('description')};\n`;\n","import { css, styled, type StyledProps } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type SvgIconColor = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n    color?: SvgIconColor;\n    fill?: SvgIconColor;\n    stroke?: SvgIconColor;\n    size?: string;\n};\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n    color: 'inherit',\n    fill: 'currentColor',\n    stroke: undefined,\n};\n\nconst colorHelper = (\n    colorType: keyof typeof colorTypesDefaults,\n    inputColor: SvgIconColor | undefined,\n    props: StyledProps<unknown>,\n) =>\n    inputColor && !reservedKeywords.includes(inputColor)\n        ? color(inputColor as NamedColor)(props)\n        : colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n    pointer-events: all;\n    box-sizing: border-box;\n    color: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n    fill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n    stroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n    font-size: ${(props) => props.size};\n`;\n\nconst commonExcludedProps = ['fill', 'color', 'stroke'];\nexport const SvgRoot = styled.svg.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n    width: 1em;\n    height: 1em;\n`;\n\nexport const SvgIconPath = styled.path.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconRect = styled.rect.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconG = styled.g.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconCircle = styled.circle.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconLinearGradient = styled.linearGradient.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconDefs = styled.defs.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconStop = styled.stop.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconClipPath = styled.clipPath.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n"],"names":[],"sourceRoot":""}