{"version":3,"file":"components-Skeleton-Skeleton-stories-mdx.7f24f91a.iframe.bundle.js","mappings":";;;;;;;;;;AAeA;;AAEA;AAGA;;;;;ACMA;AACA;;AAEA;AAGA;ACXA;AACA;AACA;AACA;AACA;;;AAQA;;ACZA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@lokalise/louis/./src/components/Skeleton/styles.ts","webpack://@lokalise/louis/./src/components/Skeleton/Circle.tsx","webpack://@lokalise/louis/./src/components/Skeleton/Rectangle.tsx","webpack://@lokalise/louis/./src/components/Flex/styles.ts"],"sourcesContent":["import { css, keyframes, styled } from '../../utils/styled';\nimport { modifier } from '../../utils/theme';\n\nconst LoadingAnimation = keyframes`\n    0% {\n        opacity: .3;\n    }\n    50% {\n        opacity: 1;\n    }\n    100% {\n        opacity: .3;\n    }\n`;\n\nexport const Container = styled.div<{ animated: boolean }>`\n    width: 100%;\n    ${modifier(\n        'animated',\n        css`\n            animation-name: ${LoadingAnimation};\n            animation-duration: 1.5s;\n            animation-iteration-count: infinite;\n        `,\n    )}\n`;\n","import { styled } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\nexport type CircleProps =\n    | {\n          /**\n           * @deprecated in favour of `size`.\n           */\n          radius: number;\n          size?: never;\n      }\n    | {\n          /**\n           * Sets the height and width of the circle.\n           */\n          size: number;\n          /**\n           * **Deprecated:** use size instead.\n           * @deprecated in favour of `size`.\n           */\n          radius?: never;\n      };\n\nexport const Circle = styled.div.withConfig<CircleProps>({\n    shouldForwardProp: excludeProps(['radius', 'size']),\n})`\n    height: ${({ radius = 0, size = radius * 2 }) => size}px;\n    width: ${({ radius = 0, size = radius * 2 }) => size}px;\n    border-radius: 50%;\n    background-color: ${color('content.disabled')};\n`;\n\nCircle.displayName = 'Circle';\n","import { css, styled } from '../../utils/styled';\nimport { color, excludeProps, modifier, radius } from '../../utils/theme';\n\nexport type RectangleProps = {\n    /**\n     * Center the Rectangle\n     * */\n    centered?: boolean;\n    /**\n     * Set the height of Rectangle.\n     * */\n    height: number;\n    /**\n     * Set the width of Rectangle. Can use percentage value.\n     * */\n    width: number | string;\n};\n\nexport const Rectangle = styled.div.withConfig<RectangleProps>({\n    shouldForwardProp: excludeProps(['height', 'width', 'centered']),\n})`\n    height: ${({ height }) => height}px;\n    width: ${({ width }) => (typeof width === 'string' ? width : `${width}px`)};\n    border-radius: ${radius('md')};\n    background-color: ${color('content.disabled')};\n    ${modifier(\n        'centered',\n        css`\n            margin: 0 auto;\n        `,\n    )};\n`;\n\nRectangle.displayName = 'Rectangle';\n","import type { SpacingLevels } from '../../foundations/designTokens';\nimport type { CSSProperties } from '../../utils/styled';\nimport { css, styled } from '../../utils/styled';\nimport { modifier, spacing } from '../../utils/theme';\n\ntype ContainerProps = {\n    alignItems: CSSProperties['alignItems'];\n    justifyContent: CSSProperties['justifyContent'];\n    flexWrap: CSSProperties['flexWrap'];\n    flexDirection: CSSProperties['flexDirection'];\n    basis?: CSSProperties['flexBasis'];\n    grow?: CSSProperties['flexGrow'];\n    shrink?: CSSProperties['flexShrink'];\n    alignSelf?: CSSProperties['alignSelf'];\n    rowGap: SpacingLevels;\n    columnGap: SpacingLevels;\n    inline: boolean;\n};\n\nexport const Container = styled.div<ContainerProps>`\n    display: flex;\n    gap: ${({ rowGap }) => spacing(rowGap)} ${({ columnGap }) => spacing(columnGap)};\n    max-width: 100%;\n    align-items: ${({ alignItems }) => alignItems};\n    justify-content: ${({ justifyContent }) => justifyContent};\n    flex-wrap: ${({ flexWrap }) => flexWrap};\n    flex-direction: ${({ flexDirection }) => flexDirection};\n    flex-basis: ${({ basis }) => basis};\n    flex-grow: ${({ grow }) => grow};\n    flex-shrink: ${({ shrink }) => shrink};\n    align-self: ${({ alignSelf }) => alignSelf};\n    ${modifier(\n        'inline',\n        css`\n            display: inline-flex;\n        `,\n    )}\n`;\n"],"names":[],"sourceRoot":""}