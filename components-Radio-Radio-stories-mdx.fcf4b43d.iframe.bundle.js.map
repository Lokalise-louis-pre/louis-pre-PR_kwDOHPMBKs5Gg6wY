{"version":3,"file":"components-Radio-Radio-stories-mdx.fcf4b43d.iframe.bundle.js","mappings":";AAKA;AACA;;;;AAIA;;;AAKA;;;;;;;;;AASA;AACA;;;;;;;;;;;;;;;AAeA;;;;AAIA;;;;AAIA;AACA;;;;;;;;;;;;;;;AAeA;;;;;;;;AAQA;;AAIA;;AAIA;;AAEA;AAGA;AACA;;AAEA;ACrEA;ACfA;AACA;;AAEA;;AAEA;;;AAKA;;;;;;;;ACmBA;AACA;AACA;AACA;AAGA;AAIA;;;AAKA;AAGA;AAGA;AAGA;AAGA;AAGA;AAeA;AATA;AAGA;AAGA;AAGA;AAGA;AASA;AAHA;AAGA;AAGA;;;;ACvFA","sources":["webpack://@lokalise/louis/./src/components/Radio/styles.ts","webpack://@lokalise/louis/./src/components/Radio/RadioGroup.tsx","webpack://@lokalise/louis/./src/components/InputErrorMessage/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts","webpack://@lokalise/louis/./src/utils/styles/outlineStyle.ts"],"sourcesContent":["import { styled } from '../../utils/styled';\nimport { outlineStyle } from '../../utils/styles';\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\n\nexport const Label = styled.label`\n    font-family: ${fontFamily('default')};\n    ${typography('description')};\n    display: grid;\n    align-items: center;\n    grid-template-columns: 1em auto;\n    gap: ${spacing(1)};\n    /* Required because of global styles applied by bootstrap */\n    margin: 0;\n`;\n\nexport const Input = styled.input`\n    // Double selector specificity to fight bootstrap global styles\n    && {\n        appearance: none;\n        margin: 0;\n        font: inherit;\n        color: currentColor;\n        width: 1em;\n        height: 1em;\n        background-color: ${color('neutral2')};\n        border: 1px solid ${color('content.primary')};\n        border-radius: 50%;\n\n        // To align the :before to the horizontal and vertical center\n        display: grid;\n        place-content: center;\n    }\n\n    &&:focus {\n        outline: none;\n    }\n    /*\n    * Focus outline is only visible when user is using keyboard. This behavior matches native radio behavior.\n    */\n    &&:focus-visible {\n        ${outlineStyle}\n    }\n\n    &&:checked {\n        border-color: ${color('primary.500')};\n    }\n\n    &&:disabled {\n        background-color: ${color('surface.secondary')};\n        border-color: ${color('content.disabled')};\n        cursor: not-allowed;\n    }\n\n    // Styling for the inner dot\n    &&::before {\n        // Has to be even number to be able to nicely align within the circle.\n        // Numbers like 7.5px are not properly centered in Chrome.\n        --size: 0.571em; // 8px\n        content: '';\n        width: var(--size);\n        height: var(--size);\n        border-radius: 50%;\n        transform: scale(0);\n        transition: 100ms transform ease-in-out;\n        background-color: ${color('primary.500')};\n    }\n\n    &&:checked::before {\n        transform: scale(1);\n    }\n\n    &&:checked:disabled::before {\n        background-color: ${color('content.disabled')};\n    }\n`;\n\nexport const RadioGroupContainer = styled.div`\n    width: 100%;\n`;\n\nexport const StyledRadioGroup = styled.div`\n    display: grid;\n    gap: ${spacing(3)};\n`;\n\nexport const RadioGroupErrorContainer = styled.div`\n    padding-top: ${spacing(3)};\n    display: grid;\n    gap: ${spacing(1)};\n`;\n","import React from 'react';\n\nimport { useErrorId } from '../../utils/hooks';\nimport { InputErrorMessage } from '../InputErrorMessage';\nimport type { RadioContextProps } from './RadioContext';\nimport { RadioContext } from './RadioContext';\nimport { RadioGroupContainer, RadioGroupErrorContainer, StyledRadioGroup } from './styles';\n\nexport interface RadioGroupProps extends RadioContextProps {\n    /**\n     * Renders a form validation `InputErrorMessage`.\n     * */\n    error?: string | string[];\n    /**\n     * Sets the css class attribute.\n     * */\n    className?: string;\n}\n\nexport const RadioGroup = ({ children, error, className, ...props }: RadioGroupProps) => {\n    const errorId = useErrorId();\n\n    return (\n        <RadioContext {...props}>\n            <RadioGroupContainer\n                role=\"radiogroup\"\n                aria-errormessage={error ? errorId : undefined}\n                className={className}\n            >\n                <StyledRadioGroup>{children}</StyledRadioGroup>\n                {error && (\n                    <RadioGroupErrorContainer>\n                        <InputErrorMessage id={errorId}>{error}</InputErrorMessage>\n                    </RadioGroupErrorContainer>\n                )}\n            </RadioGroupContainer>\n        </RadioContext>\n    );\n};\n\nRadioGroup.displayName = 'RadioGroup';\n","import { styled } from '../../utils/styled';\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\n\nexport const Error = styled.div`\n    font-family: ${fontFamily('default')};\n    ${typography('message')}\n\n    color: ${color('red.600')};\n    display: grid;\n    gap: ${spacing(1)};\n    grid-template-columns: min-content auto;\n    align-items: center;\n`;\n\nexport const IconContainer = styled.div`\n    align-self: flex-start;\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n`;\n","import { css, styled, type StyledProps } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type SvgIconColor = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n    color?: SvgIconColor;\n    fill?: SvgIconColor;\n    stroke?: SvgIconColor;\n    size?: string;\n};\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n    color: 'inherit',\n    fill: 'currentColor',\n    stroke: undefined,\n};\n\nconst colorHelper = (\n    colorType: keyof typeof colorTypesDefaults,\n    inputColor: SvgIconColor | undefined,\n    props: StyledProps<unknown>,\n) =>\n    inputColor && !reservedKeywords.includes(inputColor)\n        ? color(inputColor as NamedColor)(props)\n        : colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n    pointer-events: all;\n    box-sizing: border-box;\n    color: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n    fill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n    stroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n    font-size: ${(props) => props.size};\n`;\n\nconst commonExcludedProps = ['fill', 'color', 'stroke'];\nexport const SvgRoot = styled.svg.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n    width: 1em;\n    height: 1em;\n`;\n\nexport const SvgIconPath = styled.path.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconRect = styled.rect.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconG = styled.g.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconCircle = styled.circle.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconLinearGradient = styled.linearGradient.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconDefs = styled.defs.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconStop = styled.stop.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconClipPath = styled.clipPath.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n","import { css } from '../styled';\nimport { color } from '../theme';\n\nexport const outlineStyle = css`\n    outline-width: 2px !important;\n    outline-style: solid !important;\n    outline-color: ${color('primary.500')} !important;\n    outline-color: -webkit-focus-ring-color !important;\n    outline-offset: 1px !important;\n`;\n"],"names":[],"sourceRoot":""}