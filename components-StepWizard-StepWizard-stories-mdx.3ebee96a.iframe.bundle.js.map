{"version":3,"file":"components-StepWizard-StepWizard-stories-mdx.3ebee96a.iframe.bundle.js","mappings":";;;AAOA;AACA;AAGA;;;;;;AAQA;;;;;;AAMA;;AAIA;;;;;AAKA;AACA;AACA;;;AAGA;AACA;AAEA;;;;;AAKA;AACA;AAEA;;;;AAIA;AACA;AACA;;AAIA;;;;AAMA;;;AAGA;;;;;;;AC5DA;;AAEA;;AAEA;ACqBA;AC7BA;ACoCA;;ACpBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClBA;;;;;;AAOA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;;AAOA;;;;AAIA;AACA;;AAEA;;;AAGA;;;;;AAKA;;AAEA;;;AAKA;;;;;;AC9JA;;AAQA;AACA;;;;;;;;AAQA;AAeA;;;AAAA;AACA;;;AAGA;AACA;;;;AAIA;;;;;;;;;AASA;;;;AAIA;AAGA;;;AAIA;AAGA;;;ACxEA;AACA;;AAEA;;AAEA;;;AAKA;;;;;;;;;;;;;;ACEA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;;;;;;AAWA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;;AAGA;AAuBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AClFA;;;;;;;AASA;;;;;;AAMA;AAGA;AACA;;;;;;;AASA;AACA;;AAIA;;;AAGA;;;AAGA;;;;;;;;;;AAeA;;;;;;;;;AASA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;AAMA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;AAIA;;;;;AAKA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;;;AC7KA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;;AAEA;AACA","sources":["webpack://@lokalise/louis/./src/components/StepWizard/components/HorizontalPageCounter/styles.ts","webpack://@lokalise/louis/./src/components/StepWizard/styles.ts","webpack://@lokalise/louis/./src/components/StepWizard/StepWizard.tsx","webpack://@lokalise/louis/./src/components/StepWizard/components/StepWizardPage/styles.ts","webpack://@lokalise/louis/./src/components/StepWizard/components/StepWizardPage/StepWizardPage.tsx","webpack://@lokalise/louis/./src/components/Flex/styles.ts","webpack://@lokalise/louis/./src/components/IconButton/styles.ts","webpack://@lokalise/louis/./src/components/Input/styles.ts","webpack://@lokalise/louis/./src/components/InputErrorMessage/styles.ts","webpack://@lokalise/louis/./src/components/Popover/styles.ts","webpack://@lokalise/louis/./src/components/Toast/styles.ts","webpack://@lokalise/louis/./src/components/Tooltip/styles.ts"],"sourcesContent":["import { styled } from '../../../../utils/styled';\nimport { color, fontFamily, spacing } from '../../../../utils/theme';\nimport { Button } from '../../../Button';\n\nexport const PageCounterContainer = styled.div`\n    width: 100%;\n    position: relative;\n    margin: ${spacing(4)} 0;\n    font-family: ${fontFamily('default')};\n`;\n\nexport const PagesContainer = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    justify-content: space-evenly;\n`;\n\nexport const PageLabelContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    align-items: center;\n    justify-content: center;\n    gap: ${spacing(2)};\n    z-index: 1;\n`;\n\nexport const PageNumber = styled(Button)<{ selected: boolean }>`\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n\n    border-color: ${color('interactive.primary.idle')};\n    color: ${(props) => (!props.selected ? color('interactive.primary.idle') : color('content.white'))};\n    background-color: ${(props) => (!props.selected ? color('background.primary') : color('interactive.primary.idle'))};\n\n    &:hover:not([disabled]):not([aria-expanded='true']) {\n        border-color: ${color('interactive.primary.hover')};\n        background-color: ${(props) =>\n            !props.selected ? color('surface.primary50') : color('interactive.primary.hover')};\n        color: ${(props) => (!props.selected ? color('interactive.primary.idle') : color('content.white'))};\n    }\n\n    &:active:not([disabled]):not([aria-expanded='true']),\n    &:focus:active:not([disabled]):not([aria-expanded='true']) {\n        border-color: ${color('interactive.primary.pressed')};\n        background-color: ${(props) =>\n            !props.selected ? color('surface.primary100') : color('interactive.primary.pressed')};\n        color: ${(props) => (!props.selected ? color('interactive.primary.pressed') : color('content.white'))};\n    }\n\n    &:disabled {\n        background-color: ${color('surface.secondary')};\n        color: ${color('content.secondary')};\n        border-color: ${color('border.secondary')};\n    }\n`;\n\nexport const PageLabel = styled.div`\n    text-align: center;\n    width: 100%;\n    font-size: 14px;\n`;\n\nexport const BackgroundLine = styled.div`\n    width: 100%;\n    height: 1px;\n    background: ${color('border.primary')};\n    position: absolute;\n    margin-top: 14px;\n`;\n","import { styled } from '../../utils/styled';\nimport { color, spacing } from '../../utils/theme';\n\nexport const ActionsContainer = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n`;\n\nexport const HorizontalDivider = styled.div`\n    width: 100%;\n    background: ${color('border.secondary')};\n    height: 1px;\n    margin-top: ${spacing(1)};\n`;\n","import type { ReactElement } from 'react';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport { Button } from '../Button';\nimport { Flex } from '../Flex';\nimport { Tooltip } from '../Tooltip';\nimport { HorizontalPageCounter } from './components/HorizontalPageCounter';\nimport type { StepWizardPageData, StepWizardPageProps } from './components/StepWizardPage';\nimport { StepWizardEvents } from './hooks/useStepWizard';\nimport { ActionsContainer, HorizontalDivider } from './styles';\n\nexport type StepWizardProps = {\n    /**\n     * Tooltip displayed on the \"Next\" or \"Submit\" button.\n     * */\n    confirmTooltip?: string;\n    /**\n     * Text displayed on the final submit button on the last page.\n     * */\n    submitText: string;\n    /**\n     * The callback executed when the user presses the submit button.\n     * */\n    onSubmit: () => void;\n    /**\n     * Sets the css class attribute.\n     * */\n    className?: string;\n    /**\n     * Accept StepWizardPage as children.\n     * */\n    children: (ReactElement<StepWizardPageProps> | boolean)[];\n};\n\nexport const StepWizard = ({ confirmTooltip, submitText, onSubmit, className, children }: StepWizardProps) => {\n    const [currentPage, setCurrentPage] = useState(0);\n\n    const isPageValid = (\n        props: StepWizardPageProps,\n        index: number,\n        allPages: ReactElement<StepWizardPageProps>[],\n    ): boolean => {\n        const allPreviousPagesValid = allPages\n            .filter((_, pageIndex) => pageIndex < index)\n            .every((page) => page.props.valid || page.props.valid === undefined);\n\n        return (props.valid || props.valid === undefined) && allPreviousPagesValid;\n    };\n\n    const pages: StepWizardPageData[] = useMemo(\n        () =>\n            children\n                .filter((page) => React.isValidElement(page) && page.props)\n                .map((page) => page as ReactElement<StepWizardPageProps>)\n                .map((page, index, allPages) => ({\n                    ...page.props,\n                    valid: isPageValid(page.props, index, allPages),\n                    loading: page.props.loading ?? false,\n                    element: page,\n                })) ?? [],\n        [children],\n    );\n\n    const isLastPage = currentPage === pages.length - 1;\n\n    const onNavigateToPage = (index: number) => {\n        pages[currentPage].onPageSave?.(index);\n        setCurrentPage(index);\n    };\n\n    const onNext = () => {\n        if (isLastPage) {\n            onSubmit();\n        } else {\n            onNavigateToPage(currentPage + 1);\n        }\n    };\n\n    const onPrevious = () => {\n        onNavigateToPage(currentPage - 1);\n    };\n\n    useEffect(() => {\n        document.addEventListener(StepWizardEvents.ConfirmAndGoToNext, onNext);\n\n        return () => {\n            document.removeEventListener(StepWizardEvents.ConfirmAndGoToNext, onNext);\n        };\n    });\n\n    return (\n        <Flex gap={4} align=\"stretch\" direction=\"column\" className={className}>\n            <HorizontalPageCounter currentPageIndex={currentPage} pages={pages} onNavigateToPage={onNavigateToPage} />\n            {pages.map((page, index) => index === currentPage && page.element)}\n            <HorizontalDivider />\n            <ActionsContainer>\n                {currentPage > 0 ? (\n                    <Button type=\"button\" appearance=\"primary\" variant=\"outline\" onClick={onPrevious}>\n                        Previous: {pages[currentPage - 1].label}\n                    </Button>\n                ) : (\n                    <span />\n                )}\n                <Tooltip\n                    showPopover={!!confirmTooltip && pages[currentPage].valid}\n                    popoverContent={confirmTooltip ?? ''}\n                    placement=\"top\"\n                >\n                    <Button\n                        type=\"button\"\n                        appearance=\"primary\"\n                        variant=\"solid\"\n                        onClick={onNext}\n                        loading={pages[currentPage].loading}\n                        disabled={!pages[currentPage].valid}\n                    >\n                        {isLastPage ? `${submitText}` : `Next: ${pages[currentPage + 1].label}`}\n                    </Button>\n                </Tooltip>\n            </ActionsContainer>\n        </Flex>\n    );\n};\n\nStepWizard.displayName = 'StepWizard';\n","import { styled } from '../../../../utils/styled';\nimport { fontFamily } from '../../../../utils/theme';\nimport { Flex } from '../../../Flex';\n\nexport const Container = styled(Flex)`\n    font-family: ${fontFamily('default')};\n`;\n","import type { ReactElement, ReactNode } from 'react';\nimport React from 'react';\n\nimport { Container } from './styles';\n\n/* eslint-disable react/no-unused-prop-types */\nexport type StepWizardPageProps = {\n    /**\n     * Render Step's content.\n     * */\n    children: ReactNode | ReactNode[];\n    /**\n     * The name of the page displayed in the navigation bar.\n     * */\n    label: string;\n    /**\n     * Allows navigating to the next page.\n     * */\n    valid?: boolean;\n    /**\n     * Shows a loading spinner on the \"Next\" or \"Submit\" button.\n     * */\n    loading?: boolean;\n    /**\n     * A callback executed before the user leaves this page.\n     * */\n    onPageSave?: (movingToPage: number) => void;\n    /**\n     * Sets the css class attribute.\n     * */\n    className?: string;\n};\n\nexport type StepWizardPageData = {\n    label: string;\n    valid: boolean;\n    loading: boolean;\n    onPageSave?: (movingToPage: number) => void;\n    element: ReactElement<StepWizardPageProps>;\n};\n\nexport const StepWizardPage = ({ children, className }: StepWizardPageProps) => (\n    <Container gap={4} align=\"stretch\" direction=\"column\" className={className}>\n        {children}\n    </Container>\n);\n\nStepWizardPage.displayName = 'StepWizardPage';\n","import type { SpacingLevels } from '../../foundations/designTokens';\nimport type { CSSProperties } from '../../utils/styled';\nimport { css, styled } from '../../utils/styled';\nimport { modifier, spacing } from '../../utils/theme';\n\ntype ContainerProps = {\n    alignItems: CSSProperties['alignItems'];\n    justifyContent: CSSProperties['justifyContent'];\n    flexWrap: CSSProperties['flexWrap'];\n    flexDirection: CSSProperties['flexDirection'];\n    basis?: CSSProperties['flexBasis'];\n    grow?: CSSProperties['flexGrow'];\n    shrink?: CSSProperties['flexShrink'];\n    alignSelf?: CSSProperties['alignSelf'];\n    rowGap: SpacingLevels;\n    columnGap: SpacingLevels;\n    inline: boolean;\n};\n\nexport const Container = styled.div<ContainerProps>`\n    display: flex;\n    gap: ${({ rowGap }) => spacing(rowGap)} ${({ columnGap }) => spacing(columnGap)};\n    max-width: 100%;\n    align-items: ${({ alignItems }) => alignItems};\n    justify-content: ${({ justifyContent }) => justifyContent};\n    flex-wrap: ${({ flexWrap }) => flexWrap};\n    flex-direction: ${({ flexDirection }) => flexDirection};\n    flex-basis: ${({ basis }) => basis};\n    flex-grow: ${({ grow }) => grow};\n    flex-shrink: ${({ shrink }) => shrink};\n    align-self: ${({ alignSelf }) => alignSelf};\n    ${modifier(\n        'inline',\n        css`\n            display: inline-flex;\n        `,\n    )}\n`;\n","import { css, styled } from '../../utils/styled';\nimport { color, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance } from './IconButton';\n\ntype IconButtonProps = {\n    appearance: Appearance;\n    active?: boolean;\n    disabled?: boolean;\n    isLoading: boolean;\n};\n\nconst variantColorStyles = css`\n    ${variants('appearance', {\n        primary: css`\n            padding: 6px;\n            font-size: 20px;\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color('surface.primary100')};\n                color: ${color(`primary.500`)};\n            }\n\n            // pressed\n            &:active:not([disabled]),\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`primary.200`)};\n                color: ${color(`primary.500`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.primary50`)};\n                color: ${color(`primary.500`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.primary50`)};\n                    color: ${color(`primary.500`)};\n                `,\n            )}\n        `,\n        secondary: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`border.secondary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:active:not([disabled]),\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`border.primary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.secondary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.secondary`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n        verified: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`surface.yellow100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:active:not([disabled]),\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`yellow.200`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.yellow100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.yellow50`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n        reviewed: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`surface.green100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:active:not([disabled]),\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`green.200`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.green100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.green50`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n    })}\n`;\n\nexport const Container = styled(Pressable)<IconButtonProps>`\n    display: inline-flex;\n    align-items: center;\n    background-color: transparent;\n    color: ${color(`content.primary`)};\n    transition: background-color ${transitionTime()}, color ${transitionTime()};\n    border: 0;\n    border-radius: ${radius('md')};\n    text-decoration: none;\n\n    ${variantColorStyles}\n\n    // disabled\n    &:disabled {\n        cursor: not-allowed;\n        color: ${color('interactive.primary.disabled')};\n\n        ${modifier(\n            'isLoading',\n            css`\n                color: initial;\n                cursor: auto;\n                ${variantColorStyles}\n            `,\n        )}\n    }\n`;\n","import type { InputHTMLAttributes } from 'react';\n\nimport { css, styled } from '../../utils/styled';\nimport { withInputContainerStyle, withInputFieldStyle, withInputSizeVariants } from '../../utils/styles';\nimport type { InputSizeVariants, InputStyleProps } from '../../utils/styles';\nimport { color, modifier, spacing } from '../../utils/theme';\nimport type { FlexProps } from '../Flex';\nimport { Flex } from '../Flex';\n\nexport const Container = styled.div`\n    width: 100%;\n    display: grid;\n    gap: ${spacing(1)};\n    grid-template-columns: minmax(50px, 1fr); /* This ensures Input doesn't overflow 100% */\n`;\n\ninterface InputInterface extends InputHTMLAttributes<HTMLInputElement>, InputStyleProps {\n    inputSize: InputSizeVariants;\n}\n\nexport const StyledInput = styled.input<InputInterface>`\n    ${withInputFieldStyle};\n\n    border: 0;\n    min-width: 50px;\n    width: 100%;\n    padding: 0;\n    display: block;\n\n    ${withInputSizeVariants};\n`;\n\nexport const InputIcon = styled.div`\n    line-height: 1;\n    font-size: 0;\n`;\n\ntype InputContainerProps = {\n    hasPrefix?: boolean;\n    hasSuffix?: boolean;\n    disabled?: boolean;\n    error?: boolean;\n};\n\nexport const InputContainer = styled(Flex)<FlexProps & InputContainerProps>`\n    ${withInputContainerStyle};\n\n    align-items: center;\n    padding: ${spacing(0, 3)};\n    color: ${color('content.secondary')};\n\n    &:focus-within,\n    [data-dev-state='focus'] & {\n        color: ${color('primary.500')};\n    }\n\n    // All items should preserve their width\n    > * {\n        flex-shrink: 0;\n    }\n\n    // Except input\n    > ${StyledInput} {\n        flex-shrink: 1;\n    }\n\n    ${modifier(\n        'hasPrefix',\n        css`\n            padding-left: ${spacing(2)};\n        `,\n    )};\n\n    ${modifier(\n        'hasSuffix',\n        css`\n            padding-right: ${spacing(2)};\n        `,\n    )};\n`;\n","import { styled } from '../../utils/styled';\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\n\nexport const Error = styled.div`\n    font-family: ${fontFamily('default')};\n    ${typography('message')}\n\n    color: ${color('red.600')};\n    display: grid;\n    gap: ${spacing(1)};\n    grid-template-columns: min-content auto;\n    align-items: center;\n`;\n\nexport const IconContainer = styled.div`\n    align-self: flex-start;\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n`;\n","import type { Placement } from '@popperjs/core/lib/enums';\nimport type { HTMLAttributes } from 'react';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, radius, typography, variants, zIndex } from '../../utils/theme';\n\nconst bottom = css`\n    top: -5px;\n\n    &::before {\n        border-left-width: 1px;\n        border-left-style: solid;\n        border-top-width: 1px;\n        border-top-style: solid;\n    }\n`;\nconst top = css`\n    bottom: -5px;\n\n    &::before {\n        border-right-width: 1px;\n        border-right-style: solid;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n    }\n`;\nconst left = css`\n    right: -5px;\n\n    &::before {\n        border-right-width: 1px;\n        border-right-style: solid;\n        border-top-width: 1px;\n        border-top-style: solid;\n    }\n`;\nconst right = css`\n    left: -5px;\n\n    &::before {\n        border-left-width: 1px;\n        border-left-style: solid;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n    }\n`;\n\nexport const Arrow = styled.div<{ placement?: Placement }>`\n    position: absolute;\n    width: 8px;\n    height: 8px;\n    z-index: ${zIndex('hide')};\n\n    &::before {\n        position: absolute;\n        width: 8px;\n        height: 8px;\n        z-index: ${zIndex('hide')};\n        content: '';\n        display: block;\n        transform: rotate(45deg);\n        background-color: ${color('background.primary')};\n        border-color: ${color('border.primary')};\n    }\n\n    ${variants(\n        'placement',\n        {\n            top,\n            bottom,\n            left,\n            right,\n            'right-end': right,\n            'right-start': right,\n            'left-start': left,\n            'auto-end': css``,\n            'auto-start': css``,\n            auto: css``,\n            'bottom-end': bottom,\n            'bottom-start': bottom,\n            'left-end': left,\n            'top-end': top,\n            'top-start': top,\n        },\n        'auto',\n    )}\n`;\n\nexport const Content = styled.div<HTMLAttributes<HTMLElement>>`\n    padding: 0;\n    border-radius: ${radius('md')};\n    background-color: ${color('background.primary')};\n    border: 1px solid ${color('border.primary')};\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n    z-index: ${zIndex('popover')};\n    color: ${color('content.primary')};\n    font-family: ${fontFamily('default')};\n    ${typography('description')};\n`;\n","import { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, modifier, radius, spacing, transitionTime, typography, zIndex } from '../../utils/theme';\nimport { IconButton } from '../IconButton';\nimport type { IconButtonProps } from '../IconButton';\nimport type { PressableProps } from '../Pressable';\nimport { Pressable } from '../Pressable';\n\nexport const CloseIconButton = styled(IconButton)<IconButtonProps>`\n    opacity: 0;\n    transition: opacity 0.2s;\n`;\n\nexport const TypeIcon = styled.div`\n    flex-basis: 16px;\n    flex-shrink: 0;\n    flex-grow: 0;\n    height: 20px;\n    display: flex;\n    align-items: center;\n`;\n\nexport const Content = styled.div`\n    width: 100%;\n    flex-shrink: 1;\n    flex-grow: 1;\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: ${spacing(1)};\n`;\n\nexport const Title = styled.span`\n    ${typography('captionMedium')};\n    display: -webkit-box;\n    text-overflow: ellipsis;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    word-break: break-word;\n    overflow: hidden;\n`;\n\nexport const Description = styled.span`\n    ${typography('caption2')};\n    display: block;\n`;\n\nexport const ToastAnchor = styled(Pressable)<PressableProps>`\n    text-decoration: underline;\n    cursor: pointer;\n    transition: opacity ${transitionTime()};\n    font-weight: inherit;\n\n    ${modifier(\n        ({ href }: PressableProps) => !href,\n        css`\n            background-color: transparent;\n            border: none;\n            font-family: inherit;\n            padding: 0;\n        `,\n    )}\n\n    &:hover {\n        opacity: 0.7;\n    }\n`;\n\nexport const StyledToastContainer = styled(ToastContainer)`\n    transform: translate3d(0, 0, 9999px);\n    position: fixed;\n    font-family: inherit;\n    width: 332px;\n    min-height: 44px;\n    box-sizing: border-box;\n    padding: 0;\n\n    --toastify-color-light: ${color('content.primary')};\n    --toastify-color-dark: var(--toastify-color-light);\n    --toastify-color-info: ${color('surface.primary50')};\n    --toastify-color-success: ${color('surface.green50')};\n    --toastify-color-warning: ${color('surface.yellow50')};\n    --toastify-color-error: ${color('surface.red50')};\n    //--toastify-color-transparent: rgba(255, 255, 255, 0.7);\n\n    --toastify-icon-color-info: ${color('primary.600')};\n    --toastify-icon-color-success: ${color('green.600')};\n    --toastify-icon-color-warning: ${color('yellow.800')};\n    --toastify-icon-color-error: ${color('red.600')};\n\n    //--toastify-toast-width: 320px;\n    //--toastify-toast-background: #fff;\n    //--toastify-toast-min-height: 64px;\n    //--toastify-toast-max-height: 800px;\n    --toastify-font-family: ${fontFamily('default')};\n    --toastify-z-index: ${zIndex('toast')};\n\n    --toastify-text-color-light: ${color('content.primary')};\n    --toastify-text-color-dark: var(--toastify-text-color-light);\n\n    --toastify-text-color-info: var(--toastify-text-color-light);\n    --toastify-text-color-success: var(--toastify-text-color-light);\n    --toastify-text-color-warning: var(--toastify-text-color-light);\n    --toastify-text-color-error: var(--toastify-text-color-light);\n\n    //--toastify-spinner-color: #616161;\n    //--toastify-spinner-color-empty-area: #e0e0e0;\n\n    // Used when no type is provided\n    // toast(\"**hello**\")\n    //--toastify-color-progress-light: linear-gradient(to right, #4cd964, #5ac8fa, #007aff, #34aadc, #5856d6, #ff2d55);\n    // Used when no type is provided\n    --toastify-color-progress-dark: var(--toastify-color-progress-light);\n    --toastify-color-progress-info: var(--toastify-icon-color-info);\n    --toastify-color-progress-success: var(--toastify-icon-color-success);\n    --toastify-color-progress-warning: var(--toastify-icon-color-warning);\n    --toastify-color-progress-error: var(--toastify-icon-color-error);\n\n    .Toastify__toast {\n        box-sizing: border-box;\n        padding: ${spacing(4, 2)};\n        width: 100%;\n        display: flex;\n        align-items: flex-start;\n        color: ${color('content.primary')};\n        box-shadow: none;\n        cursor: default;\n        min-height: 44px;\n        overflow: hidden;\n        border-radius: ${radius('md')};\n        margin-bottom: ${spacing(2)};\n\n        &:hover ${CloseIconButton} {\n            opacity: 1;\n        }\n    }\n\n    .Toastify__toast-icon {\n        margin: 0;\n    }\n\n    .Toastify__toast.Toastify__toast--success {\n        background-color: var(--toastify-color-success);\n\n        .Toastify__toast-icon {\n            color: var(--toastify-icon-color-success);\n        }\n    }\n\n    .Toastify__toast.Toastify__toast--error {\n        background-color: var(--toastify-color-error);\n\n        .Toastify__toast-icon {\n            color: var(--toastify-icon-color-error);\n        }\n    }\n\n    .Toastify__toast.Toastify__toast--warning {\n        background-color: var(--toastify-color-warning);\n\n        .Toastify__toast-icon {\n            color: var(--toastify-icon-color-warning);\n        }\n    }\n\n    .Toastify__toast.Toastify__toast--info {\n        background-color: var(--toastify-color-info);\n\n        .Toastify__toast-icon {\n            color: var(--toastify-icon-color-info);\n        }\n    }\n\n    .Toastify__toast-body {\n        width: 100%;\n        display: flex;\n        align-items: flex-start;\n        gap: ${spacing(2)};\n        padding: 0;\n    }\n`;\n","import { styled } from '../../utils/styled';\nimport { color, fontFamily, radius, typography, zIndex } from '../../utils/theme';\nimport { PopoverArrow as BaseArrow, PopoverContent as BaseContent } from '../Popover';\n\nexport const Content = styled(BaseContent)`\n    font: ${fontFamily('default')};\n    ${typography('caption2')};\n    background-color: ${color('content.black')};\n    color: ${color('content.white')};\n    border-radius: ${radius('md')};\n    padding: 3px 8px 4px;\n    border-color: ${color('content.black')};\n    z-index: ${zIndex('tooltip')};\n`;\n\nexport const Arrow = styled(BaseArrow)`\n    &:before {\n        background-color: ${color('content.black')};\n        border-color: ${color('content.black')};\n    }\n`;\n"],"names":[],"sourceRoot":""}