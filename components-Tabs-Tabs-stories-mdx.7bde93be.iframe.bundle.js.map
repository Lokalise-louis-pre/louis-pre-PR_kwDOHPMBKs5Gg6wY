{"version":3,"file":"components-Tabs-Tabs-stories-mdx.7bde93be.iframe.bundle.js","mappings":";;;AAMA;AAGA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;;;AAGA;;;;AAIA;;;;AAIA;AACA;AACA;;;;;;;;;;;AAaA;AACA;ACnCA","sources":["webpack://@lokalise/louis/./src/components/Tabs/styles.ts","webpack://@lokalise/louis/./src/components/Tabs/TabList.tsx"],"sourcesContent":["import { styled } from '../../utils/styled';\nimport { color, fontFamily, spacing, transitionTime, typography } from '../../utils/theme';\n\nexport const StyledTabList = styled.div`\n    display: flex;\n    background: none;\n    border-bottom: 1px solid ${color('border.primary')};\n`;\n\nexport const StyledTab = styled.button`\n    display: inline-block;\n    border: none;\n    border-bottom: 2px solid transparent;\n    margin: 0;\n    // compensate for border so it overflows tablist border\n    margin-bottom: -1px;\n    background: none;\n    cursor: pointer;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    font-family: ${fontFamily('default')};\n    ${typography('description')}\n    padding: ${spacing(2, 0)};\n    color: ${color('content.primary')};\n    transition: color ${transitionTime()};\n\n    &:hover:enabled {\n        color: ${color('primary.500')};\n    }\n\n    & + & {\n        margin-left: ${spacing(6)};\n    }\n\n    &[aria-selected='true'] {\n        ${typography('descriptionMedium')}\n        border-bottom-color: ${color('primary.500')};\n        color: ${color('primary.500')};\n    }\n\n    &:active {\n        background: none;\n    }\n\n    &:disabled {\n        opacity: 0.25;\n        cursor: default;\n    }\n`;\n\nexport const StyledTabPanel = styled.div`\n    font-family: ${fontFamily('default')};\n`;\n","import React, { forwardRef, useContext, useLayoutEffect } from 'react';\nimport type { HTMLAttributes, ReactNode } from 'react';\n\nimport { useTabsContext } from './context/useTabsContext';\nimport { TabsDescendantsContext } from './descendants/tabsDescendantsContext';\nimport { useDescendantKeyDown } from './descendants/useDescendantsKeyDown';\nimport { StyledTabList } from './styles';\n\nexport type TabListProps = {\n    /**\n     * Renders text content and / or any HTML node inside. Expects multiple `Tab` components as children.\n     * */\n    children?: ReactNode;\n} & ({ ariaLabelledBy?: string; ariaLabel?: never } | { ariaLabel?: string; ariaLabelledBy?: never }) &\n    HTMLAttributes<HTMLDivElement>;\n\nexport const TabList = forwardRef<HTMLDivElement, TabListProps>(\n    ({ ariaLabelledBy, ariaLabel, children, ...props }, ref) => {\n        const { isControlled, onSelectTabWithKeyboard, selectedIndex, setSelectedIndex } = useTabsContext();\n        const tabs = useContext(TabsDescendantsContext).descendants;\n\n        const handleKeyDown = useDescendantKeyDown(TabsDescendantsContext, {\n            currentIndex: selectedIndex,\n            callback: onSelectTabWithKeyboard,\n            filter: (tab) => !tab.disabled,\n        });\n\n        useLayoutEffect(() => {\n            // In the event an uncontrolled component's selected index is disabled,\n            // (this should only happen if the first tab is disabled and no default\n            // index is set), we need to override the selection to the next selectable\n            // index value.\n            if (!isControlled && tabs[selectedIndex]?.disabled) {\n                const next = tabs.find((tab) => !tab.disabled);\n                if (next) {\n                    setSelectedIndex(next.index);\n                }\n            }\n        }, [tabs, isControlled, selectedIndex, setSelectedIndex]);\n\n        return (\n            <StyledTabList\n                // The element that serves as the container for\n                // the set of tabs has role tablist.\n                // https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/\n                role=\"tablist\"\n                // If the tab list has a visible label, the element\n                // with role tablist has aria-labelledby set to a value\n                // that refers to the labelling element. Otherwise,\n                // the tablist element has a label provided by aria-label.\n                // https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/\n                aria-labelledby={ariaLabelledBy}\n                aria-label={!ariaLabelledBy ? ariaLabel : undefined}\n                onKeyDown={handleKeyDown}\n                ref={ref}\n                {...props}\n            >\n                {children}\n            </StyledTabList>\n        );\n    },\n);\n\nTabList.displayName = 'TabList';\n"],"names":[],"sourceRoot":""}