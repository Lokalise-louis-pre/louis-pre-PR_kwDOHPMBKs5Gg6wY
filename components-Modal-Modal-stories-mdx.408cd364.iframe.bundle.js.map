{"version":3,"file":"components-Modal-Modal-stories-mdx.408cd364.iframe.bundle.js","mappings":";;;;AAsBA;;;AAGA;;AAIA;AACA;AACA;AACA;;;AAKA;AACA;;;AAGA;;AAIA;AACA;;;AAGA;;AAIA;;;;;;;;AAQA;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;;AAGA;;;;;AAKA;AA3EA;AAgFA;AA/EA;;AAmFA;AApFA;AAsFA;AApFA;;AAwFA;AA1FA;AA4FA;AAzFA;;AA6FA;;;;;;AC7FA;AACA;;AAEA;;;;;;;;AAQA;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;AAIA;;;;AAIA;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;;;AAGA;AAGA;AACA;AAGA;AACA;AACA;AAGA;AACA;;;;AC5DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClBA;;;;;;AAOA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;;AAOA;;;;AAIA;AACA;;AAEA;;;AAGA;;;;;AAKA;;AAEA;;;AAKA;;;;;;;ACnKA;AAGA;AACA;AACA;;;ACLA;;;;AAIA;AACA;;;;;;;AAOA;AACA;;;;;;AAMA;AACA;AACA;;;;;AAKA;;;;;;AAMA;;;AAGA;;;;;;AAMA;;;;;;;AAOA;;;;;;;;;AASA;AACA;;;;;;AAMA;AACA;;;;;;AAMA;;;;;AAKA;;;;;AAKA;;AC1EA;;;ACFA;;AAQA;AACA;;;;;;;;AAQA;AAeA;;;AAAA;AACA;;;AAGA;AACA;;;;AAIA;;;;;;;;;AASA;;;;AAIA;AAGA;;;AAIA;AAGA;;;;;AC7DA;;;;;;;AASA;;;;;;AAMA;AAGA;AACA;;;;;;;AASA;AACA;;AAIA;;;AAGA;;;AAGA;;;;;;;;;;AAeA;;;;;;;;;AASA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;AAMA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;AAIA;;;;;AAKA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA","sources":["webpack://@lokalise/louis/./src/components/Modal/styles.ts","webpack://@lokalise/louis/./src/components/DatePicker/styles.ts","webpack://@lokalise/louis/./src/components/Flex/styles.ts","webpack://@lokalise/louis/./src/components/IconButton/styles.ts","webpack://@lokalise/louis/./src/components/InlineDatePicker/DatePickerNav/styles.ts","webpack://@lokalise/louis/./src/components/InlineDatePicker/styles.ts","webpack://@lokalise/louis/./src/components/InlineDatePicker/BaseDatePicker.tsx","webpack://@lokalise/louis/./src/components/Input/styles.ts","webpack://@lokalise/louis/./src/components/Toast/styles.ts"],"sourcesContent":["import { css, styled } from '../../utils/styled';\nimport { color, fontFamily, radius, spacing, typography, variants, zIndex } from '../../utils/theme';\nimport type { ModalProps } from './Modal';\n\nexport type ModalSize = 'small' | 'default' | 'wide';\n\nconst spacingOnLargeScreens = 7;\nconst spacingOnSmallScreens = 5;\nconst doublePadding = 24;\nconst smallWidth = 320;\nconst wideWidth = 840;\nconst defaultWidth = 640;\n\ntype DialogProps = {\n    size?: ModalSize;\n    overflow?: ModalProps['overflow'];\n};\n\nexport const Header = styled.header`\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    padding: ${spacing(spacingOnSmallScreens)};\n\n    @media (min-width: 768px) {\n        padding: ${spacing(spacingOnLargeScreens)};\n    }\n`;\n\nexport const Title = styled.h2`\n    font-family: ${fontFamily('default')};\n    ${typography('heading4')}\n    color: ${color('content.primary')};\n    width: 100%;\n    margin: 0;\n`;\n\nexport const Section = styled.div`\n    padding: ${spacing(0, spacingOnSmallScreens, spacingOnSmallScreens, spacingOnSmallScreens)};\n\n    @media (min-width: 768px) {\n        padding: ${spacing(0, spacingOnLargeScreens, spacingOnLargeScreens, spacingOnLargeScreens)};\n    }\n`;\n\nexport const Actions = styled.div`\n    padding-top: ${spacing(6)};\n\n    @media (min-width: 768px) {\n        padding-top: ${spacing(7)};\n    }\n`;\n\nexport const DialogOverlay = styled.div`\n    background: rgba(0, 0, 0, 0.5);\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    overflow: auto;\n    z-index: ${zIndex('modal')};\n`;\n\nexport const StyledDialog = styled.dialog<DialogProps>`\n    background-color: ${color('background.primary')};\n    border-radius: ${radius('md')};\n    border: none;\n    box-sizing: border-box;\n    font-family: ${fontFamily('default')};\n    ${typography('description')}\n    color: ${color('content.primary')};\n    margin: revert; // ensure that browser can determine the correct margins to position the dialog\n    margin-top: ${spacing(3)};\n    padding: 0;\n    overflow: ${({ overflow }) => overflow};\n\n    @media (min-width: 768px) {\n        margin-top: ${spacing(7)};\n    }\n\n    width: 100%;\n\n    ${variants(\n        'size',\n        {\n            small: css`\n                max-width: calc(100% - ${doublePadding}px);\n                @media (min-width: ${smallWidth + doublePadding}px) {\n                    max-width: ${smallWidth}px;\n                }\n            `,\n            wide: css`\n                max-width: calc(100% - ${doublePadding}px);\n                @media (min-width: ${wideWidth + doublePadding}px) {\n                    max-width: ${wideWidth}px;\n                }\n            `,\n            default: css`\n                max-width: calc(100% - ${doublePadding}px);\n                @media (min-width: ${defaultWidth + doublePadding}px) {\n                    max-width: ${defaultWidth}px;\n                }\n            `,\n        },\n        'default',\n    )}\n`;\n","import { css, styled } from '../../utils/styled';\nimport { inputHeight } from '../../utils/styles';\nimport { color, radius, spacing, transitionTime, typography } from '../../utils/theme';\n\nexport const Container = styled.div`\n    position: relative;\n    width: 100%;\n    display: grid;\n    gap: 4px;\n`;\n\nexport const IconWrapper = styled.div`\n    background-color: ${color('background.secondary')};\n    width: 36px;\n    border-left: 1px solid ${color('border.primary')};\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    right: 0;\n    height: 100%;\n    top: 0;\n    transition: border-color ${transitionTime()}, background-color ${transitionTime()}, color ${transitionTime()};\n`;\n\ntype DateBoxProps = {\n    opened: boolean;\n};\n\nexport const DateBox = styled.button<DateBoxProps>`\n    ${typography('description')};\n    border: 1px solid ${color('border.primary')};\n    height: ${inputHeight}px;\n    width: fit-content;\n    color: ${color('content.primary')};\n    padding: ${spacing(1, 3)};\n    padding-right: ${spacing(8)};\n    border-radius: ${radius('md')};\n    overflow: hidden;\n    background-color: ${color('background.primary')};\n    position: relative;\n    align-items: center;\n    text-align: left;\n    transition: border-color ${transitionTime()};\n    cursor: pointer;\n\n    // condition to avoid hover over writing style whe opened\n    ${({ opened }) =>\n        opened\n            ? css`\n                  border-color: ${color('primary.500')};\n\n                  ${IconWrapper} {\n                      border-color: ${color('primary.500')};\n                      background-color: ${color('primary.500')};\n                      color: ${color('content.white')};\n                  }\n              `\n            : css`\n                  &:hover {\n                      border-color: ${color('primary.300')};\n\n                      ${IconWrapper} {\n                          border-color: ${color('primary.300')};\n                          background-color: ${color('primary.200')};\n                          color: ${color('primary.500')};\n                      }\n                  }\n              `}\n`;\n\nexport const DrawerContent = styled.div`\n    margin: ${spacing(4)};\n`;\n\nexport const Placeholder = styled.span`\n    ${typography('description')}\n    color: ${color('content.secondary')};\n`;\n\nexport const DateBoxLabel = styled.span`\n    padding-right: ${spacing(2)};\n    white-space: nowrap;\n`;\n","import type { SpacingLevels } from '../../foundations/designTokens';\nimport type { CSSProperties } from '../../utils/styled';\nimport { css, styled } from '../../utils/styled';\nimport { modifier, spacing } from '../../utils/theme';\n\ntype ContainerProps = {\n    alignItems: CSSProperties['alignItems'];\n    justifyContent: CSSProperties['justifyContent'];\n    flexWrap: CSSProperties['flexWrap'];\n    flexDirection: CSSProperties['flexDirection'];\n    basis?: CSSProperties['flexBasis'];\n    grow?: CSSProperties['flexGrow'];\n    shrink?: CSSProperties['flexShrink'];\n    alignSelf?: CSSProperties['alignSelf'];\n    rowGap: SpacingLevels;\n    columnGap: SpacingLevels;\n    inline: boolean;\n};\n\nexport const Container = styled.div<ContainerProps>`\n    display: flex;\n    gap: ${({ rowGap }) => spacing(rowGap)} ${({ columnGap }) => spacing(columnGap)};\n    max-width: 100%;\n    align-items: ${({ alignItems }) => alignItems};\n    justify-content: ${({ justifyContent }) => justifyContent};\n    flex-wrap: ${({ flexWrap }) => flexWrap};\n    flex-direction: ${({ flexDirection }) => flexDirection};\n    flex-basis: ${({ basis }) => basis};\n    flex-grow: ${({ grow }) => grow};\n    flex-shrink: ${({ shrink }) => shrink};\n    align-self: ${({ alignSelf }) => alignSelf};\n    ${modifier(\n        'inline',\n        css`\n            display: inline-flex;\n        `,\n    )}\n`;\n","import { css, styled } from '../../utils/styled';\nimport { color, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance } from './IconButton';\n\ntype IconButtonProps = {\n    appearance: Appearance;\n    active?: boolean;\n    disabled?: boolean;\n    isLoading: boolean;\n};\n\nconst variantColorStyles = css`\n    ${variants('appearance', {\n        primary: css`\n            padding: 6px;\n            font-size: 20px;\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color('surface.primary100')};\n                color: ${color(`primary.500`)};\n            }\n\n            // pressed\n            &:active:not([disabled]),\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`primary.200`)};\n                color: ${color(`primary.500`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.primary50`)};\n                color: ${color(`primary.500`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.primary50`)};\n                    color: ${color(`primary.500`)};\n                `,\n            )}\n        `,\n        secondary: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`border.secondary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:active:not([disabled]),\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`border.primary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.secondary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.secondary`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n        verified: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`surface.yellow100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:active:not([disabled]),\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`yellow.200`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.yellow100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.yellow50`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n        reviewed: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`surface.green100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:active:not([disabled]),\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`green.200`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.green100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.green50`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n    })}\n`;\n\nexport const Container = styled(Pressable)<IconButtonProps>`\n    display: inline-flex;\n    align-items: center;\n    background-color: transparent;\n    color: ${color(`content.primary`)};\n    transition: background-color ${transitionTime()}, color ${transitionTime()};\n    border: 0;\n    border-radius: ${radius('md')};\n    text-decoration: none;\n\n    ${variantColorStyles}\n\n    // disabled\n    &:disabled {\n        cursor: not-allowed;\n        color: ${color('interactive.primary.disabled')};\n\n        ${modifier(\n            'isLoading',\n            css`\n                color: initial;\n                cursor: auto;\n                ${variantColorStyles}\n            `,\n        )}\n    }\n`;\n","import { styled } from '../../../utils/styled';\nimport { color, spacing, typography } from '../../../utils/theme';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: ${spacing(0, 1, 2, 1)};\n`;\n\nexport const Title = styled.div`\n    ${typography('descriptionMedium')};\n    color: ${color('content.primary')};\n    cursor: default;\n`;\n","import 'react-day-picker/dist/style.css';\nimport { DayPicker } from 'react-day-picker';\n\nimport { styled } from '../../utils/styled';\nimport { color, fontFamily, radius, typography } from '../../utils/theme';\n\nexport const StyledDatePicker = styled(DayPicker)`\n    font-family: ${fontFamily('default')};\n\n    &.rdp {\n        --rdp-cell-size: 36px;\n        --rdp-accent-color: ${color('interactive.primary.idle')}; // selected day\n        --rdp-background-color: ${color('surface.primary50')};\n        margin: 0;\n    }\n\n    // days of the week\n    .rdp-head_cell {\n        text-transform: capitalize;\n        ${typography('caption2')};\n        color: ${color('content.secondary')};\n        cursor: default;\n    }\n\n    // days in the currently viewed month\n    .rdp-day {\n        ${typography('captionMedium')};\n        border-radius: ${radius('md')};\n        color: ${color('content.primary')};\n    }\n\n    // days outside the currently viewed month\n    .rdp-day_outside {\n        color: ${color('content.secondary')};\n    }\n\n    // selected day\n    .rdp-day_selected:not(.rdp-day_disabled) {\n        &:not(.rdp-day_range_middle) {\n            color: ${color('content.white')};\n        }\n        &:hover {\n            background-color: ${color('surface.primary50')};\n        }\n    }\n\n    // today\n    .rdp-day_today:not(.rdp-day_selected) {\n        color: ${color('interactive.primary.idle')};\n    }\n\n    // disabled days\n    .rdp-day_disabled,\n    .rdp-button[disabled]:not(.rdp-day_selected) {\n        background-color: inherit;\n        color: ${color('content.disabled')};\n        cursor: not-allowed;\n        opacity: 1;\n    }\n\n    /* Classes for date range selections */\n\n    // days between selected start and end date\n    .rdp-day_range_middle {\n        background-color: ${color('surface.primary50')};\n        color: ${color('content.primary')};\n        border-radius: 0;\n    }\n\n    // days between selected start and end date, before selecting an end date\n    .rdp-range_entered:not(.rdp-day_range_start):not(.rdp-day_range_end) {\n        background-color: ${color('surface.primary50')};\n        color: ${color('content.primary')};\n        border-radius: 0;\n    }\n\n    // start date\n    .rdp-day_range_start {\n        border-radius: ${radius('md')} 0 0 ${radius('md')};\n    }\n\n    // end date\n    .rdp-day_range_end:not(.rdp-range_first_day) {\n        border-radius: 0 ${radius('md')} ${radius('md')} 0;\n    }\n\n    // start and end date on the same date\n    .rdp-day_range_start.rdp-day_range_end:not(.rdp-range_first_day) {\n        border-radius: ${radius('md')};\n    }\n`;\n","import React from 'react';\nimport type { DayPickerRangeProps, DayPickerSingleProps } from 'react-day-picker';\n\nimport { useLocalisation } from '../../utils/hooks';\nimport { DatePickerNav } from './DatePickerNav';\nimport { StyledDatePicker } from './styles';\n\ntype OmittedProps = 'weekStartsOn' | 'showOutsideDays' | 'defaultMonth' | 'components';\ntype SelectionModes = 'range' | 'single';\n\nexport type BaseDatePickerProps<SelectionMode extends SelectionModes> = SelectionMode extends 'range'\n    ? Omit<DayPickerRangeProps, OmittedProps>\n    : Omit<DayPickerSingleProps, OmittedProps>;\n\nexport const BaseDatePicker = <SelectionMode extends SelectionModes>({\n    ...props\n}: BaseDatePickerProps<SelectionMode>) => {\n    const { firstDayOfWeek } = useLocalisation();\n\n    const currentMonth = props.mode === 'single' ? props.selected : props.selected?.from;\n\n    return (\n        <StyledDatePicker\n            weekStartsOn={firstDayOfWeek as DayPickerSingleProps['weekStartsOn']}\n            showOutsideDays\n            defaultMonth={currentMonth}\n            components={{\n                Caption: DatePickerNav,\n            }}\n            {...props}\n        />\n    );\n};\n","import type { InputHTMLAttributes } from 'react';\n\nimport { css, styled } from '../../utils/styled';\nimport { withInputContainerStyle, withInputFieldStyle, withInputSizeVariants } from '../../utils/styles';\nimport type { InputSizeVariants, InputStyleProps } from '../../utils/styles';\nimport { color, modifier, spacing } from '../../utils/theme';\nimport type { FlexProps } from '../Flex';\nimport { Flex } from '../Flex';\n\nexport const Container = styled.div`\n    width: 100%;\n    display: grid;\n    gap: ${spacing(1)};\n    grid-template-columns: minmax(50px, 1fr); /* This ensures Input doesn't overflow 100% */\n`;\n\ninterface InputInterface extends InputHTMLAttributes<HTMLInputElement>, InputStyleProps {\n    inputSize: InputSizeVariants;\n}\n\nexport const StyledInput = styled.input<InputInterface>`\n    ${withInputFieldStyle};\n\n    border: 0;\n    min-width: 50px;\n    width: 100%;\n    padding: 0;\n    display: block;\n\n    ${withInputSizeVariants};\n`;\n\nexport const InputIcon = styled.div`\n    line-height: 1;\n    font-size: 0;\n`;\n\ntype InputContainerProps = {\n    hasPrefix?: boolean;\n    hasSuffix?: boolean;\n    disabled?: boolean;\n    error?: boolean;\n};\n\nexport const InputContainer = styled(Flex)<FlexProps & InputContainerProps>`\n    ${withInputContainerStyle};\n\n    align-items: center;\n    padding: ${spacing(0, 3)};\n    color: ${color('content.secondary')};\n\n    &:focus-within,\n    [data-dev-state='focus'] & {\n        color: ${color('primary.500')};\n    }\n\n    // All items should preserve their width\n    > * {\n        flex-shrink: 0;\n    }\n\n    // Except input\n    > ${StyledInput} {\n        flex-shrink: 1;\n    }\n\n    ${modifier(\n        'hasPrefix',\n        css`\n            padding-left: ${spacing(2)};\n        `,\n    )};\n\n    ${modifier(\n        'hasSuffix',\n        css`\n            padding-right: ${spacing(2)};\n        `,\n    )};\n`;\n","import { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, modifier, radius, spacing, transitionTime, typography, zIndex } from '../../utils/theme';\nimport { IconButton } from '../IconButton';\nimport type { IconButtonProps } from '../IconButton';\nimport type { PressableProps } from '../Pressable';\nimport { Pressable } from '../Pressable';\n\nexport const CloseIconButton = styled(IconButton)<IconButtonProps>`\n    opacity: 0;\n    transition: opacity 0.2s;\n`;\n\nexport const TypeIcon = styled.div`\n    flex-basis: 16px;\n    flex-shrink: 0;\n    flex-grow: 0;\n    height: 20px;\n    display: flex;\n    align-items: center;\n`;\n\nexport const Content = styled.div`\n    width: 100%;\n    flex-shrink: 1;\n    flex-grow: 1;\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: ${spacing(1)};\n`;\n\nexport const Title = styled.span`\n    ${typography('captionMedium')};\n    display: -webkit-box;\n    text-overflow: ellipsis;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    word-break: break-word;\n    overflow: hidden;\n`;\n\nexport const Description = styled.span`\n    ${typography('caption2')};\n    display: block;\n`;\n\nexport const ToastAnchor = styled(Pressable)<PressableProps>`\n    text-decoration: underline;\n    cursor: pointer;\n    transition: opacity ${transitionTime()};\n    font-weight: inherit;\n\n    ${modifier(\n        ({ href }: PressableProps) => !href,\n        css`\n            background-color: transparent;\n            border: none;\n            font-family: inherit;\n            padding: 0;\n        `,\n    )}\n\n    &:hover {\n        opacity: 0.7;\n    }\n`;\n\nexport const StyledToastContainer = styled(ToastContainer)`\n    transform: translate3d(0, 0, 9999px);\n    position: fixed;\n    font-family: inherit;\n    width: 332px;\n    min-height: 44px;\n    box-sizing: border-box;\n    padding: 0;\n\n    --toastify-color-light: ${color('content.primary')};\n    --toastify-color-dark: var(--toastify-color-light);\n    --toastify-color-info: ${color('surface.primary50')};\n    --toastify-color-success: ${color('surface.green50')};\n    --toastify-color-warning: ${color('surface.yellow50')};\n    --toastify-color-error: ${color('surface.red50')};\n    //--toastify-color-transparent: rgba(255, 255, 255, 0.7);\n\n    --toastify-icon-color-info: ${color('primary.600')};\n    --toastify-icon-color-success: ${color('green.600')};\n    --toastify-icon-color-warning: ${color('yellow.800')};\n    --toastify-icon-color-error: ${color('red.600')};\n\n    //--toastify-toast-width: 320px;\n    //--toastify-toast-background: #fff;\n    //--toastify-toast-min-height: 64px;\n    //--toastify-toast-max-height: 800px;\n    --toastify-font-family: ${fontFamily('default')};\n    --toastify-z-index: ${zIndex('toast')};\n\n    --toastify-text-color-light: ${color('content.primary')};\n    --toastify-text-color-dark: var(--toastify-text-color-light);\n\n    --toastify-text-color-info: var(--toastify-text-color-light);\n    --toastify-text-color-success: var(--toastify-text-color-light);\n    --toastify-text-color-warning: var(--toastify-text-color-light);\n    --toastify-text-color-error: var(--toastify-text-color-light);\n\n    //--toastify-spinner-color: #616161;\n    //--toastify-spinner-color-empty-area: #e0e0e0;\n\n    // Used when no type is provided\n    // toast(\"**hello**\")\n    //--toastify-color-progress-light: linear-gradient(to right, #4cd964, #5ac8fa, #007aff, #34aadc, #5856d6, #ff2d55);\n    // Used when no type is provided\n    --toastify-color-progress-dark: var(--toastify-color-progress-light);\n    --toastify-color-progress-info: var(--toastify-icon-color-info);\n    --toastify-color-progress-success: var(--toastify-icon-color-success);\n    --toastify-color-progress-warning: var(--toastify-icon-color-warning);\n    --toastify-color-progress-error: var(--toastify-icon-color-error);\n\n    .Toastify__toast {\n        box-sizing: border-box;\n        padding: ${spacing(4, 2)};\n        width: 100%;\n        display: flex;\n        align-items: flex-start;\n        color: ${color('content.primary')};\n        box-shadow: none;\n        cursor: default;\n        min-height: 44px;\n        overflow: hidden;\n        border-radius: ${radius('md')};\n        margin-bottom: ${spacing(2)};\n\n        &:hover ${CloseIconButton} {\n            opacity: 1;\n        }\n    }\n\n    .Toastify__toast-icon {\n        margin: 0;\n    }\n\n    .Toastify__toast.Toastify__toast--success {\n        background-color: var(--toastify-color-success);\n\n        .Toastify__toast-icon {\n            color: var(--toastify-icon-color-success);\n        }\n    }\n\n    .Toastify__toast.Toastify__toast--error {\n        background-color: var(--toastify-color-error);\n\n        .Toastify__toast-icon {\n            color: var(--toastify-icon-color-error);\n        }\n    }\n\n    .Toastify__toast.Toastify__toast--warning {\n        background-color: var(--toastify-color-warning);\n\n        .Toastify__toast-icon {\n            color: var(--toastify-icon-color-warning);\n        }\n    }\n\n    .Toastify__toast.Toastify__toast--info {\n        background-color: var(--toastify-color-info);\n\n        .Toastify__toast-icon {\n            color: var(--toastify-icon-color-info);\n        }\n    }\n\n    .Toastify__toast-body {\n        width: 100%;\n        display: flex;\n        align-items: flex-start;\n        gap: ${spacing(2)};\n        padding: 0;\n    }\n`;\n"],"names":[],"sourceRoot":""}