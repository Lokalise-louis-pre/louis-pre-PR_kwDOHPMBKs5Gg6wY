{"version":3,"file":"components-DatePicker-DatePicker-stories-mdx.961e0f31.iframe.bundle.js","mappings":";;;;;AAWA;AACA;;AAEA;;;;;;;;AAQA;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;AAIA;;;;AAIA;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;;;AAGA;AAGA;AACA;AAGA;AACA;AACA;AAGA;AACA;;;ACpEA;;;;;;AAOA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;;AAOA;;;;AAIA;AACA;;AAEA;;;AAGA;;;;;AAKA;;AAEA;;;AAKA;;;;;;;ACnKA;AAGA;AACA;AACA;;;ACLA;;;;AAIA;AACA;;;;;;;AAOA;AACA;;;;;;AAMA;AACA;AACA;;;;;AAKA;;;;;;AAMA;;;AAGA;;;;;;AAMA;;;;;;;AAOA;;;;;;;;;AASA;AACA;;;;;;AAMA;AACA;;;;;;AAMA;;;;;AAKA;;;;;AAKA;;AC1EA;ACVA;AACA;;AAEA;;AAEA;;;AAKA;;;;;;;;;;;;;;ACEA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;;;;;;AAWA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;;AAGA;AAuBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;AChEA;AACA;AACA;AACA;AAGA;AAIA;;;AAKA;AAGA;AAGA;AAGA;AAGA;AAGA;AAeA;AATA;AAGA;AAGA;AAGA;AAGA;AASA;AAHA;AAGA;AAGA;;ACxFA;AAGA;AAGA;AACA;AACA;;;;AAIA;;;;;AAKA;;;;AAIA;;AAIA;AACA;;;AAGA;;AASA;;;AAGA;;;AAGA;AACA;AACA;;AAEA;AACA;;;;;;;;AAQA;;;;;AAKA;;;AAGA;AACA;AAGA;;;;AAIA;AACA;AACA;;;;;;;;;;AAUA;AACA;;;AAGA;AACA;AAGA;AACA;AACA;;;;;AAKA;AAYA;AAUA;AACA;AACA;AACA;;;AAGA;;;;AAIA;;AAGA;AACA;AACA;AACA;;;AAGA;;AAhCA","sources":["webpack://@lokalise/louis/./src/components/DatePicker/styles.ts","webpack://@lokalise/louis/./src/components/IconButton/styles.ts","webpack://@lokalise/louis/./src/components/InlineDatePicker/DatePickerNav/styles.ts","webpack://@lokalise/louis/./src/components/InlineDatePicker/styles.ts","webpack://@lokalise/louis/./src/components/InlineDatePicker/BaseDatePicker.tsx","webpack://@lokalise/louis/./src/components/InputErrorMessage/styles.ts","webpack://@lokalise/louis/./src/components/Popover/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts","webpack://@lokalise/louis/./src/utils/styles/inputStyle.ts"],"sourcesContent":["import { css, styled } from '../../utils/styled';\nimport { inputHeight } from '../../utils/styles';\nimport { color, radius, spacing, transitionTime, typography } from '../../utils/theme';\n\nexport const Container = styled.div`\n    position: relative;\n    width: 100%;\n    display: grid;\n    gap: 4px;\n`;\n\nexport const IconWrapper = styled.div`\n    background-color: ${color('background.secondary')};\n    width: 36px;\n    border-left: 1px solid ${color('border.primary')};\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    right: 0;\n    height: 100%;\n    top: 0;\n    transition: border-color ${transitionTime()}, background-color ${transitionTime()}, color ${transitionTime()};\n`;\n\ntype DateBoxProps = {\n    opened: boolean;\n};\n\nexport const DateBox = styled.button<DateBoxProps>`\n    ${typography('description')};\n    border: 1px solid ${color('border.primary')};\n    height: ${inputHeight}px;\n    width: fit-content;\n    color: ${color('content.primary')};\n    padding: ${spacing(1, 3)};\n    padding-right: ${spacing(8)};\n    border-radius: ${radius('md')};\n    overflow: hidden;\n    background-color: ${color('background.primary')};\n    position: relative;\n    align-items: center;\n    text-align: left;\n    transition: border-color ${transitionTime()};\n    cursor: pointer;\n\n    // condition to avoid hover over writing style whe opened\n    ${({ opened }) =>\n        opened\n            ? css`\n                  border-color: ${color('primary.500')};\n\n                  ${IconWrapper} {\n                      border-color: ${color('primary.500')};\n                      background-color: ${color('primary.500')};\n                      color: ${color('content.white')};\n                  }\n              `\n            : css`\n                  &:hover {\n                      border-color: ${color('primary.300')};\n\n                      ${IconWrapper} {\n                          border-color: ${color('primary.300')};\n                          background-color: ${color('primary.200')};\n                          color: ${color('primary.500')};\n                      }\n                  }\n              `}\n`;\n\nexport const DrawerContent = styled.div`\n    margin: ${spacing(4)};\n`;\n\nexport const Placeholder = styled.span`\n    ${typography('description')}\n    color: ${color('content.secondary')};\n`;\n\nexport const DateBoxLabel = styled.span`\n    padding-right: ${spacing(2)};\n    white-space: nowrap;\n`;\n","import { css, styled } from '../../utils/styled';\nimport { color, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance } from './IconButton';\n\ntype IconButtonProps = {\n    appearance: Appearance;\n    active?: boolean;\n    disabled?: boolean;\n    isLoading: boolean;\n};\n\nconst variantColorStyles = css`\n    ${variants('appearance', {\n        primary: css`\n            padding: 6px;\n            font-size: 20px;\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color('surface.primary100')};\n                color: ${color(`primary.500`)};\n            }\n\n            // pressed\n            &:active:not([disabled]),\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`primary.200`)};\n                color: ${color(`primary.500`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.primary50`)};\n                color: ${color(`primary.500`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.primary50`)};\n                    color: ${color(`primary.500`)};\n                `,\n            )}\n        `,\n        secondary: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`border.secondary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:active:not([disabled]),\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`border.primary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.secondary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.secondary`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n        verified: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`surface.yellow100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:active:not([disabled]),\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`yellow.200`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.yellow100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.yellow50`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n        reviewed: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`surface.green100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:active:not([disabled]),\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`green.200`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.green100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.green50`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n    })}\n`;\n\nexport const Container = styled(Pressable)<IconButtonProps>`\n    display: inline-flex;\n    align-items: center;\n    background-color: transparent;\n    color: ${color(`content.primary`)};\n    transition: background-color ${transitionTime()}, color ${transitionTime()};\n    border: 0;\n    border-radius: ${radius('md')};\n    text-decoration: none;\n\n    ${variantColorStyles}\n\n    // disabled\n    &:disabled {\n        cursor: not-allowed;\n        color: ${color('interactive.primary.disabled')};\n\n        ${modifier(\n            'isLoading',\n            css`\n                color: initial;\n                cursor: auto;\n                ${variantColorStyles}\n            `,\n        )}\n    }\n`;\n","import { styled } from '../../../utils/styled';\nimport { color, spacing, typography } from '../../../utils/theme';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: ${spacing(0, 1, 2, 1)};\n`;\n\nexport const Title = styled.div`\n    ${typography('descriptionMedium')};\n    color: ${color('content.primary')};\n    cursor: default;\n`;\n","import 'react-day-picker/dist/style.css';\nimport { DayPicker } from 'react-day-picker';\n\nimport { styled } from '../../utils/styled';\nimport { color, fontFamily, radius, typography } from '../../utils/theme';\n\nexport const StyledDatePicker = styled(DayPicker)`\n    font-family: ${fontFamily('default')};\n\n    &.rdp {\n        --rdp-cell-size: 36px;\n        --rdp-accent-color: ${color('interactive.primary.idle')}; // selected day\n        --rdp-background-color: ${color('surface.primary50')};\n        margin: 0;\n    }\n\n    // days of the week\n    .rdp-head_cell {\n        text-transform: capitalize;\n        ${typography('caption2')};\n        color: ${color('content.secondary')};\n        cursor: default;\n    }\n\n    // days in the currently viewed month\n    .rdp-day {\n        ${typography('captionMedium')};\n        border-radius: ${radius('md')};\n        color: ${color('content.primary')};\n    }\n\n    // days outside the currently viewed month\n    .rdp-day_outside {\n        color: ${color('content.secondary')};\n    }\n\n    // selected day\n    .rdp-day_selected:not(.rdp-day_disabled) {\n        &:not(.rdp-day_range_middle) {\n            color: ${color('content.white')};\n        }\n        &:hover {\n            background-color: ${color('surface.primary50')};\n        }\n    }\n\n    // today\n    .rdp-day_today:not(.rdp-day_selected) {\n        color: ${color('interactive.primary.idle')};\n    }\n\n    // disabled days\n    .rdp-day_disabled,\n    .rdp-button[disabled]:not(.rdp-day_selected) {\n        background-color: inherit;\n        color: ${color('content.disabled')};\n        cursor: not-allowed;\n        opacity: 1;\n    }\n\n    /* Classes for date range selections */\n\n    // days between selected start and end date\n    .rdp-day_range_middle {\n        background-color: ${color('surface.primary50')};\n        color: ${color('content.primary')};\n        border-radius: 0;\n    }\n\n    // days between selected start and end date, before selecting an end date\n    .rdp-range_entered:not(.rdp-day_range_start):not(.rdp-day_range_end) {\n        background-color: ${color('surface.primary50')};\n        color: ${color('content.primary')};\n        border-radius: 0;\n    }\n\n    // start date\n    .rdp-day_range_start {\n        border-radius: ${radius('md')} 0 0 ${radius('md')};\n    }\n\n    // end date\n    .rdp-day_range_end:not(.rdp-range_first_day) {\n        border-radius: 0 ${radius('md')} ${radius('md')} 0;\n    }\n\n    // start and end date on the same date\n    .rdp-day_range_start.rdp-day_range_end:not(.rdp-range_first_day) {\n        border-radius: ${radius('md')};\n    }\n`;\n","import React from 'react';\nimport type { DayPickerRangeProps, DayPickerSingleProps } from 'react-day-picker';\n\nimport { useLocalisation } from '../../utils/hooks';\nimport { DatePickerNav } from './DatePickerNav';\nimport { StyledDatePicker } from './styles';\n\ntype OmittedProps = 'weekStartsOn' | 'showOutsideDays' | 'defaultMonth' | 'components';\ntype SelectionModes = 'range' | 'single';\n\nexport type BaseDatePickerProps<SelectionMode extends SelectionModes> = SelectionMode extends 'range'\n    ? Omit<DayPickerRangeProps, OmittedProps>\n    : Omit<DayPickerSingleProps, OmittedProps>;\n\nexport const BaseDatePicker = <SelectionMode extends SelectionModes>({\n    ...props\n}: BaseDatePickerProps<SelectionMode>) => {\n    const { firstDayOfWeek } = useLocalisation();\n\n    const currentMonth = props.mode === 'single' ? props.selected : props.selected?.from;\n\n    return (\n        <StyledDatePicker\n            weekStartsOn={firstDayOfWeek as DayPickerSingleProps['weekStartsOn']}\n            showOutsideDays\n            defaultMonth={currentMonth}\n            components={{\n                Caption: DatePickerNav,\n            }}\n            {...props}\n        />\n    );\n};\n","import { styled } from '../../utils/styled';\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\n\nexport const Error = styled.div`\n    font-family: ${fontFamily('default')};\n    ${typography('message')}\n\n    color: ${color('red.600')};\n    display: grid;\n    gap: ${spacing(1)};\n    grid-template-columns: min-content auto;\n    align-items: center;\n`;\n\nexport const IconContainer = styled.div`\n    align-self: flex-start;\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n`;\n","import type { Placement } from '@popperjs/core/lib/enums';\nimport type { HTMLAttributes } from 'react';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, radius, typography, variants, zIndex } from '../../utils/theme';\n\nconst bottom = css`\n    top: -5px;\n\n    &::before {\n        border-left-width: 1px;\n        border-left-style: solid;\n        border-top-width: 1px;\n        border-top-style: solid;\n    }\n`;\nconst top = css`\n    bottom: -5px;\n\n    &::before {\n        border-right-width: 1px;\n        border-right-style: solid;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n    }\n`;\nconst left = css`\n    right: -5px;\n\n    &::before {\n        border-right-width: 1px;\n        border-right-style: solid;\n        border-top-width: 1px;\n        border-top-style: solid;\n    }\n`;\nconst right = css`\n    left: -5px;\n\n    &::before {\n        border-left-width: 1px;\n        border-left-style: solid;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n    }\n`;\n\nexport const Arrow = styled.div<{ placement?: Placement }>`\n    position: absolute;\n    width: 8px;\n    height: 8px;\n    z-index: ${zIndex('hide')};\n\n    &::before {\n        position: absolute;\n        width: 8px;\n        height: 8px;\n        z-index: ${zIndex('hide')};\n        content: '';\n        display: block;\n        transform: rotate(45deg);\n        background-color: ${color('background.primary')};\n        border-color: ${color('border.primary')};\n    }\n\n    ${variants(\n        'placement',\n        {\n            top,\n            bottom,\n            left,\n            right,\n            'right-end': right,\n            'right-start': right,\n            'left-start': left,\n            'auto-end': css``,\n            'auto-start': css``,\n            auto: css``,\n            'bottom-end': bottom,\n            'bottom-start': bottom,\n            'left-end': left,\n            'top-end': top,\n            'top-start': top,\n        },\n        'auto',\n    )}\n`;\n\nexport const Content = styled.div<HTMLAttributes<HTMLElement>>`\n    padding: 0;\n    border-radius: ${radius('md')};\n    background-color: ${color('background.primary')};\n    border: 1px solid ${color('border.primary')};\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n    z-index: ${zIndex('popover')};\n    color: ${color('content.primary')};\n    font-family: ${fontFamily('default')};\n    ${typography('description')};\n`;\n","import { css, styled, type StyledProps } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type SvgIconColor = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n    color?: SvgIconColor;\n    fill?: SvgIconColor;\n    stroke?: SvgIconColor;\n    size?: string;\n};\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n    color: 'inherit',\n    fill: 'currentColor',\n    stroke: undefined,\n};\n\nconst colorHelper = (\n    colorType: keyof typeof colorTypesDefaults,\n    inputColor: SvgIconColor | undefined,\n    props: StyledProps<unknown>,\n) =>\n    inputColor && !reservedKeywords.includes(inputColor)\n        ? color(inputColor as NamedColor)(props)\n        : colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n    pointer-events: all;\n    box-sizing: border-box;\n    color: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n    fill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n    stroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n    font-size: ${(props) => props.size};\n`;\n\nconst commonExcludedProps = ['fill', 'color', 'stroke'];\nexport const SvgRoot = styled.svg.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n    width: 1em;\n    height: 1em;\n`;\n\nexport const SvgIconPath = styled.path.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconRect = styled.rect.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconG = styled.g.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconCircle = styled.circle.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconLinearGradient = styled.linearGradient.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconDefs = styled.defs.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconStop = styled.stop.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconClipPath = styled.clipPath.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n","import type { CssDeclaration } from '../styled';\nimport { css } from '../styled';\nimport { color, fontFamily, modifier, radius, spacing, typography, variants } from '../theme';\n\nexport const withInputErrorStyle = css`\n    border-color: ${color('red.600')};\n`;\n\nexport const withInputErrorModifier = modifier('error', withInputErrorStyle);\n\nexport const withInputDisabledStyle = css`\n    color: ${color('content.disabled')};\n    background-color: ${color('surface.secondary')};\n    border-color: ${color('border.primary')};\n\n    &:hover,\n    [data-dev-state='hover'] & {\n        border-color: ${color('border.primary')};\n    }\n\n    &:focus,\n    [data-dev-state='focus'] & {\n        border-color: ${color('border.primary')};\n    }\n\n    &::placeholder {\n        color: ${color('content.disabled')};\n    }\n`;\n\nexport const withInputDisabledModifier = css`\n    ${modifier('disabled', withInputDisabledStyle)}\n\n    &:disabled {\n        ${withInputDisabledStyle}\n    }\n`;\n\nexport interface InputStyleProps {\n    error?: boolean;\n    disabled?: boolean;\n}\n\nexport const withInputContainerStyle = css<InputStyleProps>`\n    box-sizing: border-box;\n\n    ${typography('description')};\n\n    width: 100%;\n    color: ${color('content.primary')};\n    border: 1px solid ${color('border.primary')};\n    border-radius: ${radius('md')};\n    transition: border-color ease-in-out 0.15s;\n    padding: ${spacing(2, 3)};\n    background-color: ${color('background.input')};\n\n    @media (prefers-reduced-motion: reduce) {\n        transition: none;\n    }\n\n    &:hover,\n    [data-dev-state='hover'] & {\n        border-color: ${color('primary.300')};\n    }\n\n    &:focus-within,\n    [data-dev-state='focus'] & {\n        border-color: ${color('primary.500')};\n    }\n\n    ${withInputErrorModifier}\n    ${withInputDisabledModifier}\n`;\n\nexport const withInputFieldStyle = css<InputStyleProps>`\n    box-sizing: content-box;\n    -webkit-font-smoothing: subpixel-antialiased;\n\n    font-family: ${fontFamily('default')};\n    ${typography('description')};\n    color: ${color('content.primary')};\n    background: none;\n\n    &&&:focus,\n    &&&:focus-visible,\n    [data-dev-state='focus'] &&& {\n        outline: none !important;\n    }\n\n    &::placeholder {\n        ${typography('description')};\n        color: ${color('content.secondary')};\n    }\n\n    ${withInputErrorModifier}\n    ${withInputDisabledModifier}\n`;\n\nexport const withInputStyle = css<InputStyleProps>`\n    ${withInputContainerStyle};\n    ${withInputFieldStyle};\n\n    // Unfortunately, we need order of container -> input, but we need certain props from container\n    // so we override those here. Currently I don't see way to combine those styles cleaner.\n    box-sizing: border-box;\n    background: ${color('background.input')};\n`;\n\nexport type InputSizeVariants = 'small' | 'default';\n\n/**\n * This helper allows us to define custom styles for inputs in a way that allows size names, defaults and ensuring\n * that all required sizes are defined.\n */\nexport const buildInputSizeStyles = <T extends object>(sizeStyles: Record<InputSizeVariants, CssDeclaration<T>>) =>\n    variants('inputSize', sizeStyles, 'default');\n\nexport const inputHeight = 35;\nexport const smallInputHeight = 30;\n\nconst inputTopBottomBorderWidth = 2;\n\nconst inputElementHeight = inputHeight - inputTopBottomBorderWidth;\nconst smallInputElementHeight = smallInputHeight - inputTopBottomBorderWidth;\n\nexport const withInputSizeVariants = buildInputSizeStyles({\n    small: css`\n        height: ${smallInputElementHeight}px;\n        min-height: ${smallInputElementHeight}px;\n        line-height: ${smallInputElementHeight}px;\n        ${typography('caption1')};\n\n        &::placeholder {\n            ${typography('caption1')}\n        }\n\n        &::-moz-placeholder {\n            line-height: ${smallInputElementHeight}px;\n        }\n    `,\n    default: css`\n        height: ${inputElementHeight}px;\n        min-height: ${inputElementHeight}px;\n        line-height: ${inputElementHeight}px;\n\n        &::-moz-placeholder {\n            line-height: ${inputElementHeight}px;\n        }\n    `,\n});\n"],"names":[],"sourceRoot":""}