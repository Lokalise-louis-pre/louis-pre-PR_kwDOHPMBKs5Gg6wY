{"version":3,"file":"3648.5ac1bf3b.iframe.bundle.js","mappings":";AAIA;AACA;;AAEA;;AAEA;;;AAKA;;;;;;;;;;;;;;ACEA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;;;;;;AAWA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;;AAGA;AAuBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AC7EA;;;;AAIA;;;;AAMA;AACA;;;;AAIA;;;;AAIA;;;AAGA;;;;;;AAMA;;;;;AAKA;;;AAGA;;;;;;;;AAQA;AACA;;;;;;AAMA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;AAKA;;;;;;AAMA;;;;;;;;AAQA;;;AAGA;;;;;;AAMA;;;;;AAKA;AACA;;AAcA;;;AAGA;;;AA/JA;AAmKA;AACA;;AApKA;AAuKA;AACA;;AAIA;;;;;;AAQA;AChMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;;AAEA;AACA","sources":["webpack://@lokalise/louis/./src/components/InputErrorMessage/styles.ts","webpack://@lokalise/louis/./src/components/Popover/styles.ts","webpack://@lokalise/louis/./src/components/Select/styles.ts","webpack://@lokalise/louis/./src/components/Tooltip/styles.ts"],"sourcesContent":["import { styled } from '../../utils/styled';\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\n\nexport const Error = styled.div`\n    font-family: ${fontFamily('default')};\n    ${typography('message')}\n\n    color: ${color('red.600')};\n    display: grid;\n    gap: ${spacing(1)};\n    grid-template-columns: min-content auto;\n    align-items: center;\n`;\n\nexport const IconContainer = styled.div`\n    align-self: flex-start;\n    font-size: 16px;\n    display: flex;\n    align-items: center;\n`;\n","import type { Placement } from '@popperjs/core/lib/enums';\nimport type { HTMLAttributes } from 'react';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, radius, typography, variants, zIndex } from '../../utils/theme';\n\nconst bottom = css`\n    top: -5px;\n\n    &::before {\n        border-left-width: 1px;\n        border-left-style: solid;\n        border-top-width: 1px;\n        border-top-style: solid;\n    }\n`;\nconst top = css`\n    bottom: -5px;\n\n    &::before {\n        border-right-width: 1px;\n        border-right-style: solid;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n    }\n`;\nconst left = css`\n    right: -5px;\n\n    &::before {\n        border-right-width: 1px;\n        border-right-style: solid;\n        border-top-width: 1px;\n        border-top-style: solid;\n    }\n`;\nconst right = css`\n    left: -5px;\n\n    &::before {\n        border-left-width: 1px;\n        border-left-style: solid;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n    }\n`;\n\nexport const Arrow = styled.div<{ placement?: Placement }>`\n    position: absolute;\n    width: 8px;\n    height: 8px;\n    z-index: ${zIndex('hide')};\n\n    &::before {\n        position: absolute;\n        width: 8px;\n        height: 8px;\n        z-index: ${zIndex('hide')};\n        content: '';\n        display: block;\n        transform: rotate(45deg);\n        background-color: ${color('background.primary')};\n        border-color: ${color('border.primary')};\n    }\n\n    ${variants(\n        'placement',\n        {\n            top,\n            bottom,\n            left,\n            right,\n            'right-end': right,\n            'right-start': right,\n            'left-start': left,\n            'auto-end': css``,\n            'auto-start': css``,\n            auto: css``,\n            'bottom-end': bottom,\n            'bottom-start': bottom,\n            'left-end': left,\n            'top-end': top,\n            'top-start': top,\n        },\n        'auto',\n    )}\n`;\n\nexport const Content = styled.div<HTMLAttributes<HTMLElement>>`\n    padding: 0;\n    border-radius: ${radius('md')};\n    background-color: ${color('background.primary')};\n    border: 1px solid ${color('border.primary')};\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n    z-index: ${zIndex('popover')};\n    color: ${color('content.primary')};\n    font-family: ${fontFamily('default')};\n    ${typography('description')};\n`;\n","import type { Ref } from 'react';\nimport Select from 'react-select';\nimport type { GroupBase, OptionProps, SelectInstance, StylesConfig } from 'react-select';\n\nimport { CloseIcon } from '../../foundations/icons';\nimport type { Theme } from '../../foundations/themes';\nimport { styled } from '../../utils/styled';\nimport {\n    inputHeight,\n    oneLineEllipsis,\n    withInputContainerStyle,\n    withInputDisabledStyle,\n    withInputFieldStyle,\n} from '../../utils/styles';\nimport { color, fontFamily, radius, spacing, typography, zIndex } from '../../utils/theme';\nimport type { SelectProps } from './Select';\n\nexport const focusOutlineVisibilityClassName = 'LouisSelect-focus_outline_should_be_visible';\n\nexport const Item = styled.div`\n    ${oneLineEllipsis};\n\n    // Padding is added, so MultiValueLabel Item text, could be seen in full size\n    padding: 1px;\n    color: ${color('content.primary')};\n    font-size: 14px;\n    line-height: 15px;\n    max-width: 200px;\n`;\n\nexport const StyledSelect = styled(Select)`\n    ${typography('caption1')};\n    width: 100%;\n\n    .Select__option {\n        font-family: ${fontFamily('default')};\n    }\n\n    .Select__control {\n        ${withInputContainerStyle};\n        height: unset;\n        line-height: unset;\n        min-height: ${inputHeight}px;\n        padding: 0;\n    }\n    .Select__control--is-focused,\n    /* This second selector is required to make sure hover rule is not overriding focus */\n    .Select__control--is-focused:hover {\n        border-color: ${color('primary.500')};\n        outline: none;\n        box-shadow: none;\n    }\n    .Select__control--is-disabled {\n        ${withInputDisabledStyle};\n\n        .Select__placeholder {\n            color: ${color('content.disabled')};\n        }\n\n        .Select__multi-value__label {\n            padding: 2.5px 8px;\n        }\n    }\n    .Select__multi-value {\n        background-color: ${color('background.secondary')};\n        border-radius: ${radius('md')};\n        padding: 1px;\n        margin: 0;\n    }\n\n    .Select__multi-value__remove svg {\n        color: ${color('content.secondary')};\n        fill: currentColor;\n        cursor: pointer;\n    }\n    .Select__multi-value__remove:hover {\n        background-color: transparent;\n        svg {\n            background-color: transparent;\n            color: ${color('interactive.primary.hover')};\n        }\n    }\n    .Select__multi-value__remove svg {\n        width: 16px;\n        height: 16px;\n    }\n    .Select__menu-notice--no-options {\n        font-family: ${fontFamily('default')};\n    }\n    .Select__indicator {\n        padding: 6px 8px;\n    }\n    &&& .Select__input {\n        font-size: 14px;\n        line-height: 16px;\n        color: ${color('content.primary')};\n\n        &:focus {\n            outline: none !important;\n        }\n    }\n    .Select__indicators {\n        color: ${color('border.primary')};\n    }\n    .Select__clear-indicator,\n    .Select__dropdown-indicator,\n    .Select__clear-indicator svg,\n    .Select__dropdown-indicator svg {\n        cursor: pointer;\n        color: currentColor;\n        fill: currentColor;\n    }\n    .Select__clear-indicator {\n        padding: 0px;\n        margin-right: 4px;\n        font-size: 16px;\n        height: 16px;\n    }\n    .Select__dropdown-indicator {\n        padding: 0px 12px 0px 0px;\n        font-size: 16px;\n        height: 16px;\n    }\n    &:not(.Select--is-disabled) {\n        .Select__clear-indicator:hover {\n            color: ${color('primary.500')};\n        }\n        &:hover,\n        [data-dev-state='hover'] & {\n            .Select__dropdown-indicator {\n                color: ${color('primary.300')};\n            }\n        }\n        [data-dev-state='focus'] & .Select__dropdown-indicator,\n        .Select__control--menu-is-open .Select__dropdown-indicator {\n            transform: scaleY(-1);\n            color: ${color('primary.500')};\n        }\n    }\n    .Select__placeholder,\n    .Select__single-value {\n        font-size: 14px;\n        padding: 0;\n        margin: 0;\n        color: ${color('content.secondary')};\n    }\n    .Select__single-value {\n        color: ${color('content.primary')};\n    }\n    .Select__indicator-separator {\n        display: none;\n    }\n    .Select__value-container {\n        ${withInputFieldStyle};\n\n        padding: 4px 12px;\n    }\n    .Select__value-container--is-multi {\n        gap: ${spacing(1)};\n        padding: ${spacing(1, 2)};\n    }\n` as <\n    Async extends boolean,\n    Creatable extends boolean,\n    OptionType,\n    IsMulti extends boolean = false,\n    GroupType extends GroupBase<OptionType> = GroupBase<OptionType>,\n>(\n    props: SelectProps<Async, Creatable, OptionType, IsMulti, GroupType> & {\n        ref?: Ref<SelectInstance>;\n    },\n) => ReturnType<typeof Select>;\n\nexport const Container = styled.div`\n    width: 100%;\n    display: grid;\n    gap: ${spacing(1)};\n    grid-template-columns: minmax(50px, 1fr); /* This ensures Select doesn't overflow 100% */\n\n    &.${focusOutlineVisibilityClassName} .Select__option--is-focused {\n        background-color: ${color('primary.500')};\n        color: ${color('content.white')};\n    }\n    &:not(.${focusOutlineVisibilityClassName}) .Select__option:hover {\n        background-color: ${color('primary.500')};\n        color: ${color('content.white')};\n    }\n`;\n\nexport const StyledCloseIcon = styled(CloseIcon)`\n    pointer-events: inherit;\n\n    * {\n        pointer-events: inherit;\n    }\n`;\n\nconst extractThemeProps = <T extends { selectProps: object }>(props: T) => ({\n    ...props,\n    theme: 'lokaliseTheme' in props.selectProps ? props.selectProps.lokaliseTheme : undefined,\n});\n\n/**\n * First of all, this is the recommended way to apply custom styling to react-select component. But it's quite\n * inconvenient for use because it's really hard to use our styled-components theme here. Reason we can't do\n * everything using styled components is because, when rendering menu using portal (which we need to do sometimes)\n * the parent class is lost and styles are not applied to the menu. So the solution is to style menu/options using\n * recommended solution (below) and everything else using styled components.\n */\nexport const selectStyles = (\n    theme: Theme,\n): StylesConfig<\n    OptionProps & {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        __isNew__: boolean;\n    },\n    boolean\n> => ({\n    input: (base, props) => ({\n        ...base,\n        margin: 0,\n        color: color('content.primary')(extractThemeProps(props)),\n    }),\n    menu: (base, props) => ({\n        ...base,\n        backgroundColor: color('surface.primary')(extractThemeProps(props)),\n        border: `1px solid ${color('border.primary')(extractThemeProps(props))}`,\n        boxShadow: '0 0 5px rgba(0, 0, 0, 0.2)',\n        margin: spacing(1, 0, 0)(extractThemeProps(props)),\n        zIndex: zIndex('dropdown')(extractThemeProps(props)),\n    }),\n    noOptionsMessage: (base, props) => ({\n        ...base,\n        ...typography('description')(extractThemeProps(props)),\n        color: color('content.secondary')(extractThemeProps(props)),\n        textAlign: 'left',\n    }),\n    option: (base, props) => ({\n        ...base,\n        fontSize: '14px',\n        lineHeight: '16px',\n        padding: '8px 14px 9px',\n        color: color('content.primary')(extractThemeProps(props)),\n        cursor: 'pointer',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        width: '100%',\n        minWidth: '100%',\n\n        ':active': {\n            background: color('primary.500')(extractThemeProps(props)),\n            color: color('content.white')(extractThemeProps(props)),\n        },\n        // eslint-disable-next-line no-underscore-dangle\n        ...(props.data.__isNew__ ? { color: color('interactive.primary.idle')(extractThemeProps(props)) } : {}),\n        ...(props.isSelected\n            ? {\n                  background: 'none',\n                  color: color('content.primary')(extractThemeProps(props)),\n                  /**\n                   * For the selected option we originally were setting `display: flex` but combination of flex + text-overflow\n                   * was not working correctly. Instead, for the selected option, we instead have the icon to be positioned\n                   * absolutely and shift it left while simultaneously adding same amount of padding left to the selected option.\n                   *\n                   * 16px – icon width, 14px – original padding (above), 1 spacing – gap\n                   */\n                  paddingLeft: `calc(16px + 14px + ${spacing(1)(extractThemeProps(props))})`,\n                  '&::before': {\n                      width: 16,\n                      height: 16,\n                      position: 'absolute',\n                      // 16px icon width + 1 spacing\n                      marginLeft: `calc(-16px - ${spacing(1)(extractThemeProps(props))})`,\n                      content: '\"\"',\n                      flex: '0 0 auto',\n                      verticalAlign: 'middle',\n                      backgroundSize: '16px 16px',\n                      backgroundRepeat: 'no-repeat',\n                      backgroundPosition: 'center',\n                      backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M6.64372 10.1336L3.58684 7.07669L2.65918 8.01319L6.65255 12.0066L12.9872 5.65427L12.0507 4.71777L6.64372 10.1336Z' fill='${encodeURIComponent(\n                          color('content.primary')(extractThemeProps(props)),\n                      )}'/%3E%3C/svg%3E%0A\")`,\n                  },\n              }\n            : undefined),\n        ...(props.isFocused\n            ? {\n                  background: 'inherit',\n                  color: 'inherit',\n              }\n            : undefined),\n    }),\n    // No access to props inside menuPortal\n    menuPortal: (base) => ({ ...base, zIndex: theme.zIndices.dropdownInPortal }),\n    menuList: (base, props) => ({ ...base, maxHeight: props.selectProps.maxMenuHeight }),\n    valueContainer: (base) => ({ ...base, overflow: 'initial' }),\n});\n","import { styled } from '../../utils/styled';\nimport { color, fontFamily, radius, typography, zIndex } from '../../utils/theme';\nimport { PopoverArrow as BaseArrow, PopoverContent as BaseContent } from '../Popover';\n\nexport const Content = styled(BaseContent)`\n    font: ${fontFamily('default')};\n    ${typography('caption2')};\n    background-color: ${color('content.black')};\n    color: ${color('content.white')};\n    border-radius: ${radius('md')};\n    padding: 3px 8px 4px;\n    border-color: ${color('content.black')};\n    z-index: ${zIndex('tooltip')};\n`;\n\nexport const Arrow = styled(BaseArrow)`\n    &:before {\n        background-color: ${color('content.black')};\n        border-color: ${color('content.black')};\n    }\n`;\n"],"names":[],"sourceRoot":""}