{"version":3,"file":"components-Select-Select-stories-mdx.d05ca8ce.iframe.bundle.js","mappings":";;;AAiCA;AACA;AACA;AACA;AAGA;AAIA;;;AAKA;AAGA;AAGA;AAGA;AAGA;AAGA;AAeA;AATA;AAGA;AAGA;AAGA;AAGA;AASA;AAHA;AAGA;AAGA;;ACxFA;AAGA;AAGA;AACA;AACA;;;;AAIA;;;;;AAKA;;;;AAIA;;AAIA;AACA;;;AAGA;;AASA;;;AAGA;;;AAGA;AACA;AACA;;AAEA;AACA;;;;;;;;AAQA;;;;;AAKA;;;AAGA;AACA;AAGA;;;;AAIA;AACA;AACA;;;;;;;;;;AAUA;AACA;;;AAGA;AACA;AAGA;AACA;AACA;;;;;AAKA;AAYA;AAUA;AACA;AACA;AACA;;;AAGA;;;;AAIA;;AAGA;AACA;AACA;AACA;;;AAGA;;AAhCA","sources":["webpack://@lokalise/louis/./src/foundations/icons/styles.ts","webpack://@lokalise/louis/./src/utils/styles/inputStyle.ts"],"sourcesContent":["import { css, styled, type StyledProps } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type SvgIconColor = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n    color?: SvgIconColor;\n    fill?: SvgIconColor;\n    stroke?: SvgIconColor;\n    size?: string;\n};\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n    color: 'inherit',\n    fill: 'currentColor',\n    stroke: undefined,\n};\n\nconst colorHelper = (\n    colorType: keyof typeof colorTypesDefaults,\n    inputColor: SvgIconColor | undefined,\n    props: StyledProps<unknown>,\n) =>\n    inputColor && !reservedKeywords.includes(inputColor)\n        ? color(inputColor as NamedColor)(props)\n        : colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n    pointer-events: all;\n    box-sizing: border-box;\n    color: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n    fill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n    stroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n    font-size: ${(props) => props.size};\n`;\n\nconst commonExcludedProps = ['fill', 'color', 'stroke'];\nexport const SvgRoot = styled.svg.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n    width: 1em;\n    height: 1em;\n`;\n\nexport const SvgIconPath = styled.path.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconRect = styled.rect.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconG = styled.g.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconCircle = styled.circle.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconLinearGradient = styled.linearGradient.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconDefs = styled.defs.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconStop = styled.stop.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n\nexport const SvgIconClipPath = styled.clipPath.withConfig<SvgProps>({\n    shouldForwardProp: excludeProps(commonExcludedProps),\n})`\n    ${commonStyles};\n`;\n","import type { CssDeclaration } from '../styled';\nimport { css } from '../styled';\nimport { color, fontFamily, modifier, radius, spacing, typography, variants } from '../theme';\n\nexport const withInputErrorStyle = css`\n    border-color: ${color('red.600')};\n`;\n\nexport const withInputErrorModifier = modifier('error', withInputErrorStyle);\n\nexport const withInputDisabledStyle = css`\n    color: ${color('content.disabled')};\n    background-color: ${color('surface.secondary')};\n    border-color: ${color('border.primary')};\n\n    &:hover,\n    [data-dev-state='hover'] & {\n        border-color: ${color('border.primary')};\n    }\n\n    &:focus,\n    [data-dev-state='focus'] & {\n        border-color: ${color('border.primary')};\n    }\n\n    &::placeholder {\n        color: ${color('content.disabled')};\n    }\n`;\n\nexport const withInputDisabledModifier = css`\n    ${modifier('disabled', withInputDisabledStyle)}\n\n    &:disabled {\n        ${withInputDisabledStyle}\n    }\n`;\n\nexport interface InputStyleProps {\n    error?: boolean;\n    disabled?: boolean;\n}\n\nexport const withInputContainerStyle = css<InputStyleProps>`\n    box-sizing: border-box;\n\n    ${typography('description')};\n\n    width: 100%;\n    color: ${color('content.primary')};\n    border: 1px solid ${color('border.primary')};\n    border-radius: ${radius('md')};\n    transition: border-color ease-in-out 0.15s;\n    padding: ${spacing(2, 3)};\n    background-color: ${color('background.input')};\n\n    @media (prefers-reduced-motion: reduce) {\n        transition: none;\n    }\n\n    &:hover,\n    [data-dev-state='hover'] & {\n        border-color: ${color('primary.300')};\n    }\n\n    &:focus-within,\n    [data-dev-state='focus'] & {\n        border-color: ${color('primary.500')};\n    }\n\n    ${withInputErrorModifier}\n    ${withInputDisabledModifier}\n`;\n\nexport const withInputFieldStyle = css<InputStyleProps>`\n    box-sizing: content-box;\n    -webkit-font-smoothing: subpixel-antialiased;\n\n    font-family: ${fontFamily('default')};\n    ${typography('description')};\n    color: ${color('content.primary')};\n    background: none;\n\n    &&&:focus,\n    &&&:focus-visible,\n    [data-dev-state='focus'] &&& {\n        outline: none !important;\n    }\n\n    &::placeholder {\n        ${typography('description')};\n        color: ${color('content.secondary')};\n    }\n\n    ${withInputErrorModifier}\n    ${withInputDisabledModifier}\n`;\n\nexport const withInputStyle = css<InputStyleProps>`\n    ${withInputContainerStyle};\n    ${withInputFieldStyle};\n\n    // Unfortunately, we need order of container -> input, but we need certain props from container\n    // so we override those here. Currently I don't see way to combine those styles cleaner.\n    box-sizing: border-box;\n    background: ${color('background.input')};\n`;\n\nexport type InputSizeVariants = 'small' | 'default';\n\n/**\n * This helper allows us to define custom styles for inputs in a way that allows size names, defaults and ensuring\n * that all required sizes are defined.\n */\nexport const buildInputSizeStyles = <T extends object>(sizeStyles: Record<InputSizeVariants, CssDeclaration<T>>) =>\n    variants('inputSize', sizeStyles, 'default');\n\nexport const inputHeight = 35;\nexport const smallInputHeight = 30;\n\nconst inputTopBottomBorderWidth = 2;\n\nconst inputElementHeight = inputHeight - inputTopBottomBorderWidth;\nconst smallInputElementHeight = smallInputHeight - inputTopBottomBorderWidth;\n\nexport const withInputSizeVariants = buildInputSizeStyles({\n    small: css`\n        height: ${smallInputElementHeight}px;\n        min-height: ${smallInputElementHeight}px;\n        line-height: ${smallInputElementHeight}px;\n        ${typography('caption1')};\n\n        &::placeholder {\n            ${typography('caption1')}\n        }\n\n        &::-moz-placeholder {\n            line-height: ${smallInputElementHeight}px;\n        }\n    `,\n    default: css`\n        height: ${inputElementHeight}px;\n        min-height: ${inputElementHeight}px;\n        line-height: ${inputElementHeight}px;\n\n        &::-moz-placeholder {\n            line-height: ${inputElementHeight}px;\n        }\n    `,\n});\n"],"names":[],"sourceRoot":""}